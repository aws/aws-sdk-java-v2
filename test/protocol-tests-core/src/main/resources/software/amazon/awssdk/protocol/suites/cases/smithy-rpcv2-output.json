[
    {
        "description": "Ensures that clients can correctly parse float16 +Inf.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWV2YWx1Zfl8AA=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "Float16"
        },
        "then": {
            "deserializedAs": {
                "value": "Infinity"
            }
        }
    },
    {
        "description": "Ensures that clients can correctly parse float16 -Inf.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWV2YWx1Zfn8AA=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "Float16"
        },
        "then": {
            "deserializedAs": {
                "value": "-Infinity"
            }
        }
    },
    {
        "description": "Ensures that clients can correctly parse float16 NaN with high LSB.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWV2YWx1Zfl8AQ=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "Float16"
        },
        "then": {
            "deserializedAs": {
                "value": "NaN"
            }
        }
    },
    {
        "description": "Ensures that clients can correctly parse float16 NaN with high MSB.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWV2YWx1Zfl+AA=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "Float16"
        },
        "then": {
            "deserializedAs": {
                "value": "NaN"
            }
        }
    },
    {
        "description": "Deserializes null values in lists",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v3BzcGFyc2VTdHJpbmdMaXN0n/b//w=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SparseNullsOperation"
        },
        "then": {
            "deserializedAs": {
                "sparseStringList": [
                    null
                ]
            }
        }
    },
    {
        "description": "Ensures that clients can correctly parse timestamps with fractional seconds",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2hkYXRldGltZcH7Qcw32zgPvnf/"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "FractionalSeconds"
        },
        "then": {
            "deserializedAs": {
                "datetime": 946845296123
            }
        }
    },
    {
        "description": "Serializes recursive structures",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2ZuZXN0ZWS/Y2Zvb2RGb28xZm5lc3RlZL9jYmFyZEJhcjFvcmVjdXJzaXZlTWVtYmVyv2Nmb29kRm9vMmZuZXN0ZWS/Y2JhcmRCYXIy//////8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RecursiveShapes"
        },
        "then": {
            "deserializedAs": {
                "nested": {
                    "foo": "Foo1",
                    "nested": {
                        "bar": "Bar1",
                        "recursiveMember": {
                            "foo": "Foo2",
                            "nested": {
                                "bar": "Bar2"
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "description": "Deserializes recursive structures encoded using a map with definite length",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWZuZXN0ZWSiY2Zvb2RGb28xZm5lc3RlZKJjYmFyZEJhcjFvcmVjdXJzaXZlTWVtYmVyomNmb29kRm9vMmZuZXN0ZWShY2JhcmRCYXIy"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RecursiveShapes"
        },
        "then": {
            "deserializedAs": {
                "nested": {
                    "foo": "Foo1",
                    "nested": {
                        "bar": "Bar1",
                        "recursiveMember": {
                            "foo": "Foo2",
                            "nested": {
                                "bar": "Bar2"
                            }
                        }
                    }
                }
            }
        }
    },
    {
        "description": "Deserializes sparse maps",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v29zcGFyc2VTdHJ1Y3RNYXC/Y2Zvb79iaGlldGhlcmX/Y2Jher9iaGljYnll////"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborSparseMaps"
        },
        "then": {
            "deserializedAs": {
                "sparseStructMap": {
                    "foo": {
                        "hi": "there"
                    },
                    "baz": {
                        "hi": "bye"
                    }
                }
            }
        }
    },
    {
        "description": "A response that contains a sparse map of sets",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2xzcGFyc2VTZXRNYXC/YXmfYWFhYv9heJ////8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborSparseMaps"
        },
        "then": {
            "deserializedAs": {
                "sparseSetMap": {
                    "x": [],
                    "y": [
                        "a",
                        "b"
                    ]
                }
            }
        }
    },
    {
        "description": "Ensure that 0 and false are sent over the wire in all maps and lists",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v29zcGFyc2VOdW1iZXJNYXC/YXgA/3BzcGFyc2VCb29sZWFuTWFwv2F49P//"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborSparseMaps"
        },
        "then": {
            "deserializedAs": {
                "sparseNumberMap": {
                    "x": 0
                },
                "sparseBooleanMap": {
                    "x": false
                }
            }
        }
    },
    {
        "description": "Deserializes maps",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oW5kZW5zZVN0cnVjdE1hcKJjZm9voWJoaWV0aGVyZWNiYXqhYmhpY2J5ZQ=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborDenseMaps"
        },
        "then": {
            "deserializedAs": {
                "denseStructMap": {
                    "foo": {
                        "hi": "there"
                    },
                    "baz": {
                        "hi": "bye"
                    }
                }
            }
        }
    },
    {
        "description": "Ensure that 0 and false are sent over the wire in all maps and lists",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "om5kZW5zZU51bWJlck1hcKFheABvZGVuc2VCb29sZWFuTWFwoWF49A=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborDenseMaps"
        },
        "then": {
            "deserializedAs": {
                "denseNumberMap": {
                    "x": 0
                },
                "denseBooleanMap": {
                    "x": false
                }
            }
        }
    },
    {
        "description": "A response that contains a dense map of sets",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWtkZW5zZVNldE1hcKJheIBheYJhYWFi"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborDenseMaps"
        },
        "then": {
            "deserializedAs": {
                "denseSetMap": {
                    "x": [],
                    "y": [
                        "a",
                        "b"
                    ]
                }
            }
        }
    },
    {
        "description": "Serializes RpcV2 Cbor lists",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2pzdHJpbmdMaXN0n2Nmb29jYmFy/2lzdHJpbmdTZXSfY2Zvb2NiYXL/a2ludGVnZXJMaXN0nwEC/2tib29sZWFuTGlzdJ/19P9tdGltZXN0YW1wTGlzdJ/B+0HU1/vzgAAAwftB1Nf784AAAP9oZW51bUxpc3SfY0Zvb2Ew/2tpbnRFbnVtTGlzdJ8BAv9wbmVzdGVkU3RyaW5nTGlzdJ+fY2Zvb2NiYXL/n2NiYXpjcXV4//9tc3RydWN0dXJlTGlzdJ+/YWFhMWFiYTL/v2FhYTNhYmE0//9oYmxvYkxpc3SfQ2Zvb0NiYXL//w=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborLists"
        },
        "then": {
            "deserializedAs": {
                "stringList": [
                    "foo",
                    "bar"
                ],
                "stringSet": [
                    "foo",
                    "bar"
                ],
                "integerList": [
                    1,
                    2
                ],
                "booleanList": [
                    true,
                    false
                ],
                "timestampList": [
                    1398796238000,
                    1398796238000
                ],
                "enumList": [
                    "Foo",
                    "0"
                ],
                "intEnumList": [
                    1,
                    2
                ],
                "nestedStringList": [
                    [
                        "foo",
                        "bar"
                    ],
                    [
                        "baz",
                        "qux"
                    ]
                ],
                "structureList": [
                    {
                        "a": "1",
                        "b": "2"
                    },
                    {
                        "a": "3",
                        "b": "4"
                    }
                ],
                "blobList": [
                    "foo",
                    "bar"
                ]
            }
        }
    },
    {
        "description": "Serializes empty RpcV2 Cbor lists",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2pzdHJpbmdMaXN0n///"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborLists"
        },
        "then": {
            "deserializedAs": {
                "stringList": []
            }
        }
    },
    {
        "description": "Can deserialize indefinite length text strings inside an indefinite length list",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2pzdHJpbmdMaXN0n394HUFuIGV4YW1wbGUgaW5kZWZpbml0ZSBzdHJpbmcsdyB3aGljaCB3aWxsIGJlIGNodW5rZWQsbiBvbiBlYWNoIGNvbW1h/394NUFub3RoZXIgZXhhbXBsZSBpbmRlZmluaXRlIHN0cmluZyB3aXRoIG9ubHkgb25lIGNodW5r/3ZUaGlzIGlzIGEgcGxhaW4gc3RyaW5n//8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborLists"
        },
        "then": {
            "deserializedAs": {
                "stringList": [
                    "An example indefinite string, which will be chunked, on each comma",
                    "Another example indefinite string with only one chunk",
                    "This is a plain string"
                ]
            }
        }
    },
    {
        "description": "Can deserialize indefinite length text strings inside a definite length list",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "oWpzdHJpbmdMaXN0g394HUFuIGV4YW1wbGUgaW5kZWZpbml0ZSBzdHJpbmcsdyB3aGljaCB3aWxsIGJlIGNodW5rZWQsbiBvbiBlYWNoIGNvbW1h/394NUFub3RoZXIgZXhhbXBsZSBpbmRlZmluaXRlIHN0cmluZyB3aXRoIG9ubHkgb25lIGNodW5r/3ZUaGlzIGlzIGEgcGxhaW4gc3RyaW5n"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "RpcV2CborLists"
        },
        "then": {
            "deserializedAs": {
                "stringList": [
                    "An example indefinite string, which will be chunked, on each comma",
                    "Another example indefinite string with only one chunk",
                    "This is a plain string"
                ]
            }
        }
    },
    {
        "description": "Serializes simple scalar properties",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v3B0cnVlQm9vbGVhblZhbHVl9XFmYWxzZUJvb2xlYW5WYWx1ZfRpYnl0ZVZhbHVlBWtkb3VibGVWYWx1Zfs//jlYEGJN02pmbG9hdFZhbHVl+kD0AABsaW50ZWdlclZhbHVlGQEAanNob3J0VmFsdWUZJqprc3RyaW5nVmFsdWVmc2ltcGxlaWJsb2JWYWx1ZUNmb2//"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "trueBooleanValue": true,
                "falseBooleanValue": false,
                "byteValue": 5,
                "doubleValue": 1.889,
                "floatValue": 7.625,
                "integerValue": 256,
                "shortValue": 9898,
                "stringValue": "simple",
                "blobValue": "foo"
            }
        }
    },
    {
        "description": "Deserializes simple scalar properties encoded using a map with definite length",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "qXB0cnVlQm9vbGVhblZhbHVl9XFmYWxzZUJvb2xlYW5WYWx1ZfRpYnl0ZVZhbHVlBWtkb3VibGVWYWx1Zfs//jlYEGJN02pmbG9hdFZhbHVl+kD0AABsaW50ZWdlclZhbHVlGQEAanNob3J0VmFsdWUZJqprc3RyaW5nVmFsdWVmc2ltcGxlaWJsb2JWYWx1ZUNmb28="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "trueBooleanValue": true,
                "falseBooleanValue": false,
                "byteValue": 5,
                "doubleValue": 1.889,
                "floatValue": 7.625,
                "integerValue": 256,
                "shortValue": 9898,
                "stringValue": "simple",
                "blobValue": "foo"
            }
        }
    },
    {
        "description": "RpcV2 Cbor should not deserialize null structure values",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2tzdHJpbmdWYWx1Zfb/"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {}
        }
    },
    {
        "description": "Supports handling NaN float values.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2tkb3VibGVWYWx1Zft/+AAAAAAAAGpmbG9hdFZhbHVl+n/AAAD/"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "doubleValue": "NaN",
                "floatValue": "NaN"
            }
        }
    },
    {
        "description": "Supports handling Infinity float values.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2tkb3VibGVWYWx1Zft/8AAAAAAAAGpmbG9hdFZhbHVl+n+AAAD/"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "doubleValue": "Infinity",
                "floatValue": "Infinity"
            }
        }
    },
    {
        "description": "Supports handling Negative Infinity float values.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2tkb3VibGVWYWx1Zfv/8AAAAAAAAGpmbG9hdFZhbHVl+v+AAAD/"
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "doubleValue": "-Infinity",
                "floatValue": "-Infinity"
            }
        }
    },
    {
        "description": "Supports upcasting from a smaller byte representation of the same data type.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2tkb3VibGVWYWx1Zfk+AGpmbG9hdFZhbHVl+UegbGludGVnZXJWYWx1ZRg4aWxvbmdWYWx1ZRkBAGpzaG9ydFZhbHVlCv8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "doubleValue": 1.5,
                "floatValue": 7.625,
                "integerValue": 56,
                "longValue": 256,
                "shortValue": 10
            }
        }
    },
    {
        "description": "The client should skip over additional fields that are not part of the structure. This allows a\nclient generated against an older Smithy model to be able to communicate with a server that is\ngenerated against a newer Smithy model.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v2lieXRlVmFsdWUFa2RvdWJsZVZhbHVl+z/+OVgQYk3TcWZhbHNlQm9vbGVhblZhbHVl9GpmbG9hdFZhbHVl+kD0AABrZXh0cmFPYmplY3S/c2luZGVmaW5pdGVMZW5ndGhNYXC/a3dpdGhBbkFycmF5nwECA///cWRlZmluaXRlTGVuZ3RoTWFwo3J3aXRoQURlZmluaXRlQXJyYXmDAQIDeB1hbmRTb21lSW5kZWZpbml0ZUxlbmd0aFN0cmluZ3gfdGhhdCBoYXMsIGJlZW4gY2h1bmtlZCBvbiBjb21tYWxub3JtYWxTdHJpbmdjZm9vanNob3J0VmFsdWUZJw9uc29tZU90aGVyRmllbGR2dGhpcyBzaG91bGQgYmUgc2tpcHBlZP9saW50ZWdlclZhbHVlGQEAaWxvbmdWYWx1ZRkmkWpzaG9ydFZhbHVlGSaqa3N0cmluZ1ZhbHVlZnNpbXBsZXB0cnVlQm9vbGVhblZhbHVl9WlibG9iVmFsdWVDZm9v/w=="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "SimpleScalarProperties"
        },
        "then": {
            "deserializedAs": {
                "trueBooleanValue": true,
                "falseBooleanValue": false,
                "byteValue": 5,
                "doubleValue": 1.889,
                "floatValue": 7.625,
                "integerValue": 256,
                "longValue": 9873,
                "shortValue": 9898,
                "stringValue": "simple",
                "blobValue": "foo"
            }
        }
    },
    {
        "description": "When output is empty we write CBOR equivalent of {}",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v/8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "OptionalInputOutput"
        },
        "then": {
            "deserializedAs": {}
        }
    },
    {
        "description": "When output structure is empty we write CBOR equivalent of {}",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v/8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "EmptyInputOutput"
        },
        "then": {
            "deserializedAs": {}
        }
    },
    {
        "description": "Clients should accept a CBOR empty struct if there is no output.",
        "given": {
            "response": {
                "status_code": 200,
                "binaryBody": "v/8="
            }
        },
        "when": {
            "action": "unmarshall",
            "operation": "NoInputOutput"
        },
        "then": {
            "deserializedAs": {}
        }
    }
]