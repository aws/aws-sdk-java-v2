/*
 * Copyright 2010-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.services.dynamodb.mapper;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Collections;
import java.util.Date;
import java.util.Set;
import java.util.UUID;
import org.junit.Ignore;
import org.junit.Test;
import software.amazon.awssdk.annotations.ReviewBeforeRelease;
import software.amazon.awssdk.services.dynamodb.datamodeling.DynamoDbAutoGeneratedTimestamp;
import software.amazon.awssdk.services.dynamodb.datamodeling.DynamoDbDelimited;
import software.amazon.awssdk.services.dynamodb.datamodeling.DynamoDbHashKey;
import software.amazon.awssdk.services.dynamodb.datamodeling.DynamoDbMappingException;
import software.amazon.awssdk.services.dynamodb.datamodeling.DynamoDbTable;
import software.amazon.awssdk.services.dynamodb.datamodeling.DynamoDbTypeConvertedTimestamp;
import software.amazon.awssdk.services.dynamodb.pojos.AutoKeyAndVal;
import software.amazon.awssdk.services.dynamodb.pojos.Currency;
import software.amazon.awssdk.services.dynamodb.pojos.DateRange;
import software.amazon.awssdk.services.dynamodb.pojos.KeyAndVal;
import software.amazon.awssdk.services.dynamodb.pojos.PhoneNumber;

/**
 * Tests updating component attribute fields correctly.
 */
public class DelimitedIntegrationTest extends AbstractKeyAndValIntegrationTestCase {

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testPhoneNumber() {
        final KeyAndPhoneNumber object = new KeyAndPhoneNumber();
        object.setVal(new PhoneNumber("206", "266", "1000"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testPhoneNumberAreaCodeNull() {
        final KeyAndPhoneNumber object = new KeyAndPhoneNumber();
        object.setVal(new PhoneNumber(null, "266", "1000"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testPhoneNumberAreaCodeEmpty() {
        final KeyAndPhoneNumber object = new KeyAndPhoneNumber();
        object.setVal(new PhoneNumber("", "266", "1000"));

        final PhoneNumber after = assertBeforeAndAfterChange(null, object);
        assertNotNull(after);
        assertNull(after.getAreaCode());
        assertEquals(object.getVal().getExchange(), after.getExchange());
        assertEquals(object.getVal().getSubscriber(), after.getSubscriber());
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testPhoneNumberNull() {
        final KeyAndPhoneNumber object = new KeyAndPhoneNumber();
        object.setVal(null);
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testPhoneNumberAllNull() {
        final KeyAndPhoneNumber object = new KeyAndPhoneNumber();
        object.setVal(new PhoneNumber(null, null, null));

        final PhoneNumber after = assertBeforeAndAfterChange(null, object);
        assertNull(after); //<- and empty object produces a null val
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testKeyAndSpecialCharacterDelimitedierPhoneNumber() {
        final KeyAndSpecialCharacterDelimitedierPhoneNumber object = new KeyAndSpecialCharacterDelimitedierPhoneNumber();
        object.setVal(new PhoneNumber("206", "867", "5309"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testKeyAndDefaultDelimitederPhoneNumber() {
        final KeyAndDefaultDelimitederPhoneNumber object = new KeyAndDefaultDelimitederPhoneNumber();
        object.setVal(new PhoneNumber("206", "867", "5309"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test
    public void testPhoneNumberDelimitedOnType() {
        final KeyAndPhoneNumberDelimitedOnType object = new KeyAndPhoneNumberDelimitedOnType();
        object.setVal(new KeyAndPhoneNumberDelimitedOnType.Value());
        object.getVal().setAreaCode("206");
        object.getVal().setExchange("266");
        object.getVal().setSubscriber("1000");
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test(expected = DynamoDbMappingException.class)
    public void testKeyAndNoAttributeNamesPhoneNumber() {
        final KeyAndNoAttributeNamesPhoneNumber object = new KeyAndNoAttributeNamesPhoneNumber();
        object.setVal(new PhoneNumber("206", "867", "5309"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code PhoneNumber}.
     */
    @Test(expected = DynamoDbMappingException.class)
    public void testExceptionOnPhoneNumberSet() {
        final KeyAndPhoneNumberSet object = new KeyAndPhoneNumberSet();
        object.setVal(Collections.<PhoneNumber>singleton(new PhoneNumber("206", "266", "1000")));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code DateRange}.
     */
    @Test
    public void testFormatDateRange() throws Exception {
        final KeyAndFormatDateRange object = new KeyAndFormatDateRange();
        object.setVal(new KeyAndFormatDateRange.FormatDateRange());
        object.getVal().setStart(new Date(System.currentTimeMillis() - 6000L));
        object.getVal().setEnd(new Date(System.currentTimeMillis() + 6000L));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code DateRange}.
     */
    @Test
    public void testFormatDateRangeStartNull() throws Exception {
        final KeyAndFormatDateRange object = new KeyAndFormatDateRange();
        object.setVal(new KeyAndFormatDateRange.FormatDateRange());
        object.getVal().setStart(null);
        object.getVal().setEnd(new Date());
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code DateRange}.
     */
    @Test
    public void testFormatDateRangeEndNull() throws Exception {
        final KeyAndFormatDateRange object = new KeyAndFormatDateRange();
        object.setVal(new KeyAndFormatDateRange.FormatDateRange());
        object.getVal().setStart(new Date());
        object.getVal().setEnd(null);
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test using {@code DateRange}.
     */
    @Test
    public void testFormatDateRangeStartAndEndNull() {
        final KeyAndFormatDateRange object = new KeyAndFormatDateRange();
        object.setVal(new KeyAndFormatDateRange.FormatDateRange());
        object.getVal().setStart(null);
        object.getVal().setEnd(null);

        final KeyAndFormatDateRange.FormatDateRange after = assertBeforeAndAfterChange(null, object);
        assertNull(after); //<- and empty object produces a null val
    }

    /**
     * Test using {@code DateRange}.
     */
    @Test
    @Ignore
    @ReviewBeforeRelease("Behavior is different with java.time; cannot parse 'yyyMMdd' formatted date to ZonedDateTime.")
    public void testDelimitedKeyAndDate() {
        final DelimitedKeyAndDate object = new DelimitedKeyAndDate();
        object.setKey(new DelimitedKeyAndDate.Key());
        object.getKey().setKey(UUID.randomUUID().toString());
        object.getKey().setVal(new Date());
        assertBeforeAndAfterChange(true, object);
    }

    /**
     * Test marshalling.
     */
    @Test
    public void testKeyAndCurrency() {
        final KeyAndCurrency object = new KeyAndCurrency();
        object.setVal(new Currency(12.95D, "USD"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * Test marshalling.
     */
    @Test(expected = DynamoDbMappingException.class)
    public void testKeyAndNestedCurrency() {
        final KeyAndNestedCurrency object = new KeyAndNestedCurrency();
        object.setVal(new KeyAndNestedCurrency.Value());
        object.getVal().setKey(UUID.randomUUID().toString());
        object.getVal().setVal(new Currency(12.95D, "USD"));
        assertBeforeAndAfterChange(false, object);
    }

    /**
     * An object with {@code PhoneNumber}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndSpecialCharacterDelimitedierPhoneNumber extends AutoKeyAndVal<PhoneNumber> {
        @DynamoDbDelimited(attributeNames = {"areaCode", "exchange", "subscriber"}, delimiter = '\\')
        public PhoneNumber getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final PhoneNumber val) {
            super.setVal(val);
        }
    }

    /**
     * An object with {@code PhoneNumber}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndDefaultDelimitederPhoneNumber extends AutoKeyAndVal<PhoneNumber> {
        @DynamoDbDelimited(attributeNames = {"areaCode", "exchange", "subscriber"})
        public PhoneNumber getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final PhoneNumber val) {
            super.setVal(val);
        }
    }

    /**
     * An object with {@code PhoneNumber}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndPhoneNumber extends AutoKeyAndVal<PhoneNumber> {
        @DynamoDbDelimited(attributeNames = {"areaCode", "exchange", "subscriber"}, delimiter = '-')
        public PhoneNumber getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final PhoneNumber val) {
            super.setVal(val);
        }
    }

    /**
     * An object with {@code PhoneNumber}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndPhoneNumberDelimitedOnType extends AutoKeyAndVal<KeyAndPhoneNumberDelimitedOnType.Value> {
        public Value getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final Value val) {
            super.setVal(val);
        }

        @DynamoDbDelimited(attributeNames = {"areaCode", "exchange", "subscriber"}, delimiter = '.')
        public static class Value extends PhoneNumber {
        }
    }

    /**
     * An object with {@code PhoneNumber}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndNoAttributeNamesPhoneNumber extends AutoKeyAndVal<PhoneNumber> {
        @DynamoDbDelimited(attributeNames = {})
        public PhoneNumber getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final PhoneNumber val) {
            super.setVal(val);
        }
    }

    /**
     * An object with {@code PhoneNumber}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndPhoneNumberSet extends AutoKeyAndVal<Set<PhoneNumber>> {
        @DynamoDbDelimited(attributeNames = {"areaCode", "exchange", "subscriber"}, delimiter = '-')
        public Set<PhoneNumber> getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final Set<PhoneNumber> val) {
            super.setVal(val);
        }
    }

    /**
     * An object with {@code DateRange}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndDateRange extends AutoKeyAndVal<DateRange> {
        @DynamoDbDelimited(attributeNames = {"start", "end"})
        public DateRange getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final DateRange val) {
            super.setVal(val);
        }
    }

    /**
     * An object with {@code DateRange}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndFormatDateRange extends AutoKeyAndVal<KeyAndFormatDateRange.FormatDateRange> {
        @DynamoDbDelimited(attributeNames = {"start", "end"})
        public FormatDateRange getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final FormatDateRange val) {
            super.setVal(val);
        }

        public static class FormatDateRange extends DateRange {
            @DynamoDbTypeConvertedTimestamp(pattern = "yyyy MMddHHmmssSSS")
            public Date getStart() {
                return super.getStart();
            }

            @DynamoDbTypeConvertedTimestamp(pattern = "yyyy MMddHHmmssSSS")
            public Date getEnd() {
                return super.getEnd();
            }
        }
    }

    /**
     * An object with {@code DateRange}.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class DelimitedKeyAndDate extends KeyAndVal<DelimitedKeyAndDate.Key, Date> {
        @DynamoDbHashKey
        @DynamoDbDelimited(attributeNames = {"key", "val"})
        public DelimitedKeyAndDate.Key getKey() {
            return super.getKey();
        }

        @Override
        public void setKey(final DelimitedKeyAndDate.Key key) {
            super.setKey(key);
        }

        @DynamoDbAutoGeneratedTimestamp
        public Date getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final Date val) {
            super.setVal(val);
        }

        public static class Key extends KeyAndVal<String, Date> {
            @Override
            public String getKey() {
                return super.getKey();
            }

            @Override
            public void setKey(final String key) {
                super.setKey(key);
            }

            @DynamoDbTypeConvertedTimestamp(pattern = "yyyyMMdd")
            public Date getVal() {
                return super.getVal();
            }

            @Override
            public void setVal(final Date val) {
                super.setVal(val);
            }
        }
    }

    /**
     * An object with a complex type.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndCurrency extends AutoKeyAndVal<Currency> {
        @DynamoDbDelimited(attributeNames = {"amount", "unit"}, delimiter = '$')
        public Currency getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final Currency val) {
            super.setVal(val);
        }
    }

    /**
     * An object with a complex type.
     */
    @DynamoDbTable(tableName = "aws-java-sdk-util")
    public static class KeyAndNestedCurrency extends AutoKeyAndVal<KeyAndNestedCurrency.Value> {
        @DynamoDbDelimited(attributeNames = {"key", "val"}, delimiter = '#')
        public KeyAndNestedCurrency.Value getVal() {
            return super.getVal();
        }

        @Override
        public void setVal(final KeyAndNestedCurrency.Value val) {
            super.setVal(val);
        }

        public static class Value extends KeyAndVal<String, Currency> {
            @Override
            public String getKey() {
                return super.getKey();
            }

            @Override
            public void setKey(final String key) {
                super.setKey(key);
            }

            @Override
            public Currency getVal() {
                return super.getVal();
            }

            @Override
            public void setVal(final Currency val) {
                super.setVal(val);
            }
        }
    }

}
