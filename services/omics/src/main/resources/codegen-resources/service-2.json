{
  "version":"2.0",
  "metadata":{
    "apiVersion":"2022-11-28",
    "endpointPrefix":"omics",
    "jsonVersion":"1.1",
    "protocol":"rest-json",
    "serviceFullName":"Amazon Omics",
    "serviceId":"Omics",
    "signatureVersion":"v4",
    "signingName":"omics",
    "uid":"omics-2022-11-28"
  },
  "operations":{
    "BatchDeleteReadSet":{
      "name":"BatchDeleteReadSet",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/readset/batch/delete",
        "responseCode":200
      },
      "input":{"shape":"BatchDeleteReadSetRequest"},
      "output":{"shape":"BatchDeleteReadSetResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes one or more read sets.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "CancelAnnotationImportJob":{
      "name":"CancelAnnotationImportJob",
      "http":{
        "method":"DELETE",
        "requestUri":"/import/annotation/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"CancelAnnotationImportRequest"},
      "output":{"shape":"CancelAnnotationImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Cancels an annotation import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "CancelRun":{
      "name":"CancelRun",
      "http":{
        "method":"POST",
        "requestUri":"/run/{id}/cancel",
        "responseCode":202
      },
      "input":{"shape":"CancelRunRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Cancels a run.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "CancelVariantImportJob":{
      "name":"CancelVariantImportJob",
      "http":{
        "method":"DELETE",
        "requestUri":"/import/variant/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"CancelVariantImportRequest"},
      "output":{"shape":"CancelVariantImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Cancels a variant import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "CreateAnnotationStore":{
      "name":"CreateAnnotationStore",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore",
        "responseCode":200
      },
      "input":{"shape":"CreateAnnotationStoreRequest"},
      "output":{"shape":"CreateAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Creates an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "CreateReferenceStore":{
      "name":"CreateReferenceStore",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore",
        "responseCode":200
      },
      "input":{"shape":"CreateReferenceStoreRequest"},
      "output":{"shape":"CreateReferenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a reference store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "CreateRunGroup":{
      "name":"CreateRunGroup",
      "http":{
        "method":"POST",
        "requestUri":"/runGroup",
        "responseCode":201
      },
      "input":{"shape":"CreateRunGroupRequest"},
      "output":{"shape":"CreateRunGroupResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a run group.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "CreateSequenceStore":{
      "name":"CreateSequenceStore",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore",
        "responseCode":200
      },
      "input":{"shape":"CreateSequenceStoreRequest"},
      "output":{"shape":"CreateSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a sequence store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "CreateVariantStore":{
      "name":"CreateVariantStore",
      "http":{
        "method":"POST",
        "requestUri":"/variantStore",
        "responseCode":200
      },
      "input":{"shape":"CreateVariantStoreRequest"},
      "output":{"shape":"CreateVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Creates a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "CreateWorkflow":{
      "name":"CreateWorkflow",
      "http":{
        "method":"POST",
        "requestUri":"/workflow",
        "responseCode":201
      },
      "input":{"shape":"CreateWorkflowRequest"},
      "output":{"shape":"CreateWorkflowResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Creates a workflow.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "DeleteAnnotationStore":{
      "name":"DeleteAnnotationStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/annotationStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"DeleteAnnotationStoreRequest"},
      "output":{"shape":"DeleteAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Deletes an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "DeleteReference":{
      "name":"DeleteReference",
      "http":{
        "method":"DELETE",
        "requestUri":"/referencestore/{referenceStoreId}/reference/{id}",
        "responseCode":200
      },
      "input":{"shape":"DeleteReferenceRequest"},
      "output":{"shape":"DeleteReferenceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a genome reference.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteReferenceStore":{
      "name":"DeleteReferenceStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/referencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"DeleteReferenceStoreRequest"},
      "output":{"shape":"DeleteReferenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a genome reference store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteRun":{
      "name":"DeleteRun",
      "http":{
        "method":"DELETE",
        "requestUri":"/run/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteRunRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a workflow run.</p>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteRunGroup":{
      "name":"DeleteRunGroup",
      "http":{
        "method":"DELETE",
        "requestUri":"/runGroup/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteRunGroupRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a workflow run group.</p>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "DeleteSequenceStore":{
      "name":"DeleteSequenceStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/sequencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"DeleteSequenceStoreRequest"},
      "output":{"shape":"DeleteSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a sequence store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"},
      "idempotent":true
    },
    "DeleteVariantStore":{
      "name":"DeleteVariantStore",
      "http":{
        "method":"DELETE",
        "requestUri":"/variantStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"DeleteVariantStoreRequest"},
      "output":{"shape":"DeleteVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Deletes a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"},
      "idempotent":true
    },
    "DeleteWorkflow":{
      "name":"DeleteWorkflow",
      "http":{
        "method":"DELETE",
        "requestUri":"/workflow/{id}",
        "responseCode":202
      },
      "input":{"shape":"DeleteWorkflowRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Deletes a workflow.</p>",
      "endpoint":{"hostPrefix":"workflows-"},
      "idempotent":true
    },
    "GetAnnotationImportJob":{
      "name":"GetAnnotationImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/import/annotation/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"GetAnnotationImportRequest"},
      "output":{"shape":"GetAnnotationImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about an annotation import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetAnnotationStore":{
      "name":"GetAnnotationStore",
      "http":{
        "method":"GET",
        "requestUri":"/annotationStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"GetAnnotationStoreRequest"},
      "output":{"shape":"GetAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetReadSet":{
      "name":"GetReadSet",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/readset/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetRequest"},
      "output":{"shape":"GetReadSetResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"RangeNotSatisfiableException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets a file from a read set.</p>",
      "endpoint":{"hostPrefix":"storage-"}
    },
    "GetReadSetActivationJob":{
      "name":"GetReadSetActivationJob",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/activationjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetActivationJobRequest"},
      "output":{"shape":"GetReadSetActivationJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a read set activation job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReadSetExportJob":{
      "name":"GetReadSetExportJob",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/exportjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetExportJobRequest"},
      "output":{"shape":"GetReadSetExportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a read set export job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReadSetImportJob":{
      "name":"GetReadSetImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/importjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetImportJobRequest"},
      "output":{"shape":"GetReadSetImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a read set import job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReadSetMetadata":{
      "name":"GetReadSetMetadata",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{sequenceStoreId}/readset/{id}/metadata",
        "responseCode":200
      },
      "input":{"shape":"GetReadSetMetadataRequest"},
      "output":{"shape":"GetReadSetMetadataResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets details about a read set.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReference":{
      "name":"GetReference",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{referenceStoreId}/reference/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceRequest"},
      "output":{"shape":"GetReferenceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"RangeNotSatisfiableException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets a reference file.</p>",
      "endpoint":{"hostPrefix":"storage-"}
    },
    "GetReferenceImportJob":{
      "name":"GetReferenceImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{referenceStoreId}/importjob/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceImportJobRequest"},
      "output":{"shape":"GetReferenceImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a reference import job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReferenceMetadata":{
      "name":"GetReferenceMetadata",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{referenceStoreId}/reference/{id}/metadata",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceMetadataRequest"},
      "output":{"shape":"GetReferenceMetadataResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a genome reference's metadata.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetReferenceStore":{
      "name":"GetReferenceStore",
      "http":{
        "method":"GET",
        "requestUri":"/referencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetReferenceStoreRequest"},
      "output":{"shape":"GetReferenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a reference store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetRun":{
      "name":"GetRun",
      "http":{
        "method":"GET",
        "requestUri":"/run/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetRunRequest"},
      "output":{"shape":"GetRunResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a workflow run.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetRunGroup":{
      "name":"GetRunGroup",
      "http":{
        "method":"GET",
        "requestUri":"/runGroup/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetRunGroupRequest"},
      "output":{"shape":"GetRunGroupResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a workflow run group.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetRunTask":{
      "name":"GetRunTask",
      "http":{
        "method":"GET",
        "requestUri":"/run/{id}/task/{taskId}",
        "responseCode":200
      },
      "input":{"shape":"GetRunTaskRequest"},
      "output":{"shape":"GetRunTaskResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a workflow run task.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "GetSequenceStore":{
      "name":"GetSequenceStore",
      "http":{
        "method":"GET",
        "requestUri":"/sequencestore/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetSequenceStoreRequest"},
      "output":{"shape":"GetSequenceStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a sequence store.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "GetVariantImportJob":{
      "name":"GetVariantImportJob",
      "http":{
        "method":"GET",
        "requestUri":"/import/variant/{jobId}",
        "responseCode":200
      },
      "input":{"shape":"GetVariantImportRequest"},
      "output":{"shape":"GetVariantImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about a variant import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetVariantStore":{
      "name":"GetVariantStore",
      "http":{
        "method":"GET",
        "requestUri":"/variantStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"GetVariantStoreRequest"},
      "output":{"shape":"GetVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Gets information about a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "GetWorkflow":{
      "name":"GetWorkflow",
      "http":{
        "method":"GET",
        "requestUri":"/workflow/{id}",
        "responseCode":200
      },
      "input":{"shape":"GetWorkflowRequest"},
      "output":{"shape":"GetWorkflowResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Gets information about a workflow.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListAnnotationImportJobs":{
      "name":"ListAnnotationImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/import/annotations",
        "responseCode":200
      },
      "input":{"shape":"ListAnnotationImportJobsRequest"},
      "output":{"shape":"ListAnnotationImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of annotation import jobs.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListAnnotationStores":{
      "name":"ListAnnotationStores",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStores",
        "responseCode":200
      },
      "input":{"shape":"ListAnnotationStoresRequest"},
      "output":{"shape":"ListAnnotationStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of annotation stores.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListReadSetActivationJobs":{
      "name":"ListReadSetActivationJobs",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/activationjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetActivationJobsRequest"},
      "output":{"shape":"ListReadSetActivationJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read set activation jobs.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSetExportJobs":{
      "name":"ListReadSetExportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/exportjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetExportJobsRequest"},
      "output":{"shape":"ListReadSetExportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read set export jobs.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSetImportJobs":{
      "name":"ListReadSetImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/importjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetImportJobsRequest"},
      "output":{"shape":"ListReadSetImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read set import jobs.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReadSets":{
      "name":"ListReadSets",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/readsets",
        "responseCode":200
      },
      "input":{"shape":"ListReadSetsRequest"},
      "output":{"shape":"ListReadSetsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of read sets.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReferenceImportJobs":{
      "name":"ListReferenceImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore/{referenceStoreId}/importjobs",
        "responseCode":200
      },
      "input":{"shape":"ListReferenceImportJobsRequest"},
      "output":{"shape":"ListReferenceImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of reference import jobs.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReferenceStores":{
      "name":"ListReferenceStores",
      "http":{
        "method":"POST",
        "requestUri":"/referencestores",
        "responseCode":200
      },
      "input":{"shape":"ListReferenceStoresRequest"},
      "output":{"shape":"ListReferenceStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of reference stores.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListReferences":{
      "name":"ListReferences",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore/{referenceStoreId}/references",
        "responseCode":200
      },
      "input":{"shape":"ListReferencesRequest"},
      "output":{"shape":"ListReferencesResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of references.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListRunGroups":{
      "name":"ListRunGroups",
      "http":{
        "method":"GET",
        "requestUri":"/runGroup",
        "responseCode":200
      },
      "input":{"shape":"ListRunGroupsRequest"},
      "output":{"shape":"ListRunGroupsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of run groups.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListRunTasks":{
      "name":"ListRunTasks",
      "http":{
        "method":"GET",
        "requestUri":"/run/{id}/task",
        "responseCode":200
      },
      "input":{"shape":"ListRunTasksRequest"},
      "output":{"shape":"ListRunTasksResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of tasks for a run.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListRuns":{
      "name":"ListRuns",
      "http":{
        "method":"GET",
        "requestUri":"/run",
        "responseCode":200
      },
      "input":{"shape":"ListRunsRequest"},
      "output":{"shape":"ListRunsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of runs.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "ListSequenceStores":{
      "name":"ListSequenceStores",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestores",
        "responseCode":200
      },
      "input":{"shape":"ListSequenceStoresRequest"},
      "output":{"shape":"ListSequenceStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of sequence stores.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "ListTagsForResource":{
      "name":"ListTagsForResource",
      "http":{
        "method":"GET",
        "requestUri":"/tags/{resourceArn}",
        "responseCode":200
      },
      "input":{"shape":"ListTagsForResourceRequest"},
      "output":{"shape":"ListTagsForResourceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of tags for a resource.</p>",
      "endpoint":{"hostPrefix":"tags-"}
    },
    "ListVariantImportJobs":{
      "name":"ListVariantImportJobs",
      "http":{
        "method":"POST",
        "requestUri":"/import/variants",
        "responseCode":200
      },
      "input":{"shape":"ListVariantImportJobsRequest"},
      "output":{"shape":"ListVariantImportJobsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of variant import jobs.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListVariantStores":{
      "name":"ListVariantStores",
      "http":{
        "method":"POST",
        "requestUri":"/variantStores",
        "responseCode":200
      },
      "input":{"shape":"ListVariantStoresRequest"},
      "output":{"shape":"ListVariantStoresResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Retrieves a list of variant stores.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "ListWorkflows":{
      "name":"ListWorkflows",
      "http":{
        "method":"GET",
        "requestUri":"/workflow",
        "responseCode":200
      },
      "input":{"shape":"ListWorkflowsRequest"},
      "output":{"shape":"ListWorkflowsResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Retrieves a list of workflows.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "StartAnnotationImportJob":{
      "name":"StartAnnotationImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/import/annotation",
        "responseCode":200
      },
      "input":{"shape":"StartAnnotationImportRequest"},
      "output":{"shape":"StartAnnotationImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Starts an annotation import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "StartReadSetActivationJob":{
      "name":"StartReadSetActivationJob",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/activationjob",
        "responseCode":200
      },
      "input":{"shape":"StartReadSetActivationJobRequest"},
      "output":{"shape":"StartReadSetActivationJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a read set activation job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartReadSetExportJob":{
      "name":"StartReadSetExportJob",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/exportjob",
        "responseCode":200
      },
      "input":{"shape":"StartReadSetExportJobRequest"},
      "output":{"shape":"StartReadSetExportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a read set export job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartReadSetImportJob":{
      "name":"StartReadSetImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/sequencestore/{sequenceStoreId}/importjob",
        "responseCode":200
      },
      "input":{"shape":"StartReadSetImportJobRequest"},
      "output":{"shape":"StartReadSetImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a read set import job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartReferenceImportJob":{
      "name":"StartReferenceImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/referencestore/{referenceStoreId}/importjob",
        "responseCode":200
      },
      "input":{"shape":"StartReferenceImportJobRequest"},
      "output":{"shape":"StartReferenceImportJobResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a reference import job.</p>",
      "endpoint":{"hostPrefix":"control-storage-"}
    },
    "StartRun":{
      "name":"StartRun",
      "http":{
        "method":"POST",
        "requestUri":"/run",
        "responseCode":201
      },
      "input":{"shape":"StartRunRequest"},
      "output":{"shape":"StartRunResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Starts a run.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "StartVariantImportJob":{
      "name":"StartVariantImportJob",
      "http":{
        "method":"POST",
        "requestUri":"/import/variant",
        "responseCode":200
      },
      "input":{"shape":"StartVariantImportRequest"},
      "output":{"shape":"StartVariantImportResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Starts a variant import job.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "TagResource":{
      "name":"TagResource",
      "http":{
        "method":"POST",
        "requestUri":"/tags/{resourceArn}",
        "responseCode":204
      },
      "input":{"shape":"TagResourceRequest"},
      "output":{"shape":"TagResourceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Tags a resource.</p>",
      "endpoint":{"hostPrefix":"tags-"}
    },
    "UntagResource":{
      "name":"UntagResource",
      "http":{
        "method":"DELETE",
        "requestUri":"/tags/{resourceArn}",
        "responseCode":204
      },
      "input":{"shape":"UntagResourceRequest"},
      "output":{"shape":"UntagResourceResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Removes tags from a resource.</p>",
      "endpoint":{"hostPrefix":"tags-"},
      "idempotent":true
    },
    "UpdateAnnotationStore":{
      "name":"UpdateAnnotationStore",
      "http":{
        "method":"POST",
        "requestUri":"/annotationStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"UpdateAnnotationStoreRequest"},
      "output":{"shape":"UpdateAnnotationStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Updates an annotation store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "UpdateRunGroup":{
      "name":"UpdateRunGroup",
      "http":{
        "method":"POST",
        "requestUri":"/runGroup/{id}",
        "responseCode":202
      },
      "input":{"shape":"UpdateRunGroupRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Updates a run group.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    },
    "UpdateVariantStore":{
      "name":"UpdateVariantStore",
      "http":{
        "method":"POST",
        "requestUri":"/variantStore/{name}",
        "responseCode":200
      },
      "input":{"shape":"UpdateVariantStoreRequest"},
      "output":{"shape":"UpdateVariantStoreResponse"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"}
      ],
      "documentation":"<p>Updates a variant store.</p>",
      "endpoint":{"hostPrefix":"analytics-"}
    },
    "UpdateWorkflow":{
      "name":"UpdateWorkflow",
      "http":{
        "method":"POST",
        "requestUri":"/workflow/{id}",
        "responseCode":202
      },
      "input":{"shape":"UpdateWorkflowRequest"},
      "errors":[
        {"shape":"InternalServerException"},
        {"shape":"ServiceQuotaExceededException"},
        {"shape":"ThrottlingException"},
        {"shape":"ValidationException"},
        {"shape":"ConflictException"},
        {"shape":"ResourceNotFoundException"},
        {"shape":"AccessDeniedException"},
        {"shape":"RequestTimeoutException"}
      ],
      "documentation":"<p>Updates a workflow.</p>",
      "endpoint":{"hostPrefix":"workflows-"}
    }
  },
  "shapes":{
    "AccessDeniedException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>You do not have sufficient access to perform this action.</p>",
      "error":{
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "ActivateReadSetFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The filter's status.</p>"
        }
      },
      "documentation":"<p>A read set activation job filter.</p>"
    },
    "ActivateReadSetJobItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      },
      "documentation":"<p>A read set activation job.</p>"
    },
    "ActivateReadSetJobList":{
      "type":"list",
      "member":{"shape":"ActivateReadSetJobItem"}
    },
    "ActivateReadSetSourceItem":{
      "type":"structure",
      "required":[
        "readSetId",
        "status"
      ],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The source's read set ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobItemStatus",
          "documentation":"<p>The source's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The source's status message.</p>"
        }
      },
      "documentation":"<p>A source for a read set activation job.</p>"
    },
    "ActivateReadSetSourceList":{
      "type":"list",
      "member":{"shape":"ActivateReadSetSourceItem"}
    },
    "ActivationJobId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "AnnotationImportItemDetail":{
      "type":"structure",
      "required":[
        "jobStatus",
        "source"
      ],
      "members":{
        "jobStatus":{
          "shape":"JobStatus",
          "documentation":"<p>The item's job status.</p>"
        },
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>Details about an imported annotation item.</p>"
    },
    "AnnotationImportItemDetails":{
      "type":"list",
      "member":{"shape":"AnnotationImportItemDetail"},
      "max":1,
      "min":1
    },
    "AnnotationImportItemSource":{
      "type":"structure",
      "required":["source"],
      "members":{
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>A source for an annotation import job.</p>"
    },
    "AnnotationImportItemSources":{
      "type":"list",
      "member":{"shape":"AnnotationImportItemSource"},
      "max":1,
      "min":1
    },
    "AnnotationImportJobItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "destinationName",
        "id",
        "roleArn",
        "status",
        "updateTime"
      ],
      "members":{
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "destinationName":{
          "shape":"String",
          "documentation":"<p>The job's destination annotation store.</p>"
        },
        "id":{
          "shape":"String",
          "documentation":"<p>The job's ID.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        }
      },
      "documentation":"<p>An annotation import job.</p>"
    },
    "AnnotationImportJobItems":{
      "type":"list",
      "member":{"shape":"AnnotationImportJobItem"}
    },
    "AnnotationStoreItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "description",
        "id",
        "name",
        "reference",
        "sseConfig",
        "status",
        "statusMessage",
        "storeArn",
        "storeFormat",
        "storeSizeBytes",
        "updateTime"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>The store's creation time.</p>"
        },
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The store's status message.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The store's file format.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      },
      "documentation":"<p>An annotation store.</p>"
    },
    "AnnotationStoreItems":{
      "type":"list",
      "member":{"shape":"AnnotationStoreItem"}
    },
    "AnnotationType":{
      "type":"string",
      "enum":[
        "GENERIC",
        "CHR_POS",
        "CHR_POS_REF_ALT",
        "CHR_START_END_ONE_BASE",
        "CHR_START_END_REF_ALT_ONE_BASE",
        "CHR_START_END_ZERO_BASE",
        "CHR_START_END_REF_ALT_ZERO_BASE"
      ]
    },
    "Arn":{
      "type":"string",
      "max":2048,
      "min":20,
      "pattern":"^arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)$"
    },
    "BatchDeleteReadSetRequest":{
      "type":"structure",
      "required":[
        "ids",
        "sequenceStoreId"
      ],
      "members":{
        "ids":{
          "shape":"ReadSetIdList",
          "documentation":"<p>The read sets' IDs.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read sets' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "BatchDeleteReadSetResponse":{
      "type":"structure",
      "members":{
        "errors":{
          "shape":"ReadSetBatchErrorList",
          "documentation":"<p>Errors returned by individual delete operations.</p>"
        }
      }
    },
    "Blob":{"type":"blob"},
    "Boolean":{
      "type":"boolean",
      "box":true
    },
    "CancelAnnotationImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "CancelAnnotationImportResponse":{
      "type":"structure",
      "members":{
      }
    },
    "CancelRunRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "CancelVariantImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "CancelVariantImportResponse":{
      "type":"structure",
      "members":{
      }
    },
    "ClientToken":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "CommentChar":{
      "type":"string",
      "max":1,
      "min":1
    },
    "CompletionTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "ConflictException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request cannot be applied to the target resource in its current state.</p>",
      "error":{
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "CreateAnnotationStoreRequest":{
      "type":"structure",
      "required":["storeFormat"],
      "members":{
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "name":{
          "shape":"CreateAnnotationStoreRequestNameString",
          "documentation":"<p>A name for the store.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The genome reference for the store's annotations.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The annotation file format of the store.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>File parsing options for the annotation store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        }
      }
    },
    "CreateAnnotationStoreRequestNameString":{
      "type":"string",
      "pattern":"^([a-z]){1}([a-z0-9_]){2,254}$"
    },
    "CreateAnnotationStoreResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "name",
        "status"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The annotation file format of the store.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>The store's file parsing options.</p>"
        }
      }
    },
    "CreateReferenceStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>A name for the store.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        }
      }
    },
    "CreateReferenceStoreResponse":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id"
      ],
      "members":{
        "arn":{
          "shape":"ReferenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's SSE settings.</p>"
        }
      }
    },
    "CreateRunGroupRequest":{
      "type":"structure",
      "required":["requestId"],
      "members":{
        "maxCpus":{
          "shape":"CreateRunGroupRequestMaxCpusInteger",
          "documentation":"<p>The maximum number of CPUs to use in the group.</p>"
        },
        "maxDuration":{
          "shape":"CreateRunGroupRequestMaxDurationInteger",
          "documentation":"<p>A max duration for the group.</p>"
        },
        "maxRuns":{
          "shape":"CreateRunGroupRequestMaxRunsInteger",
          "documentation":"<p>The maximum number of concurrent runs for the group.</p>"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>A name for the group.</p>"
        },
        "requestId":{
          "shape":"RunGroupRequestId",
          "documentation":"<p>A request ID for the group.</p>",
          "idempotencyToken":true
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the group.</p>"
        }
      }
    },
    "CreateRunGroupRequestMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupRequestMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupRequestMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "CreateRunGroupResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunGroupArn",
          "documentation":"<p>The group's ARN.</p>"
        },
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the run group.</p>"
        }
      }
    },
    "CreateSequenceStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>A name for the store.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        }
      }
    },
    "CreateSequenceStoreResponse":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id"
      ],
      "members":{
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's SSE settings.</p>"
        }
      }
    },
    "CreateVariantStoreRequest":{
      "type":"structure",
      "required":["reference"],
      "members":{
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "name":{
          "shape":"CreateVariantStoreRequestNameString",
          "documentation":"<p>A name for the store.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The genome reference for the store's variants.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>Server-side encryption (SSE) settings for the store.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the store.</p>"
        }
      }
    },
    "CreateVariantStoreRequestNameString":{
      "type":"string",
      "pattern":"^([a-z]){1}([a-z0-9_]){2,254}$"
    },
    "CreateVariantStoreResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "name",
        "status"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        }
      }
    },
    "CreateWorkflowRequest":{
      "type":"structure",
      "required":["requestId"],
      "members":{
        "definitionUri":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The URI of a definition for the workflow.</p>"
        },
        "definitionZip":{
          "shape":"Blob",
          "documentation":"<p>A ZIP archive for the workflow.</p>"
        },
        "description":{
          "shape":"WorkflowDescription",
          "documentation":"<p>A description for the workflow.</p>"
        },
        "engine":{
          "shape":"WorkflowEngine",
          "documentation":"<p>An engine for the workflow.</p>"
        },
        "main":{
          "shape":"WorkflowMain",
          "documentation":"<p>The path of the main definition file for the workflow.</p>"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>A name for the workflow.</p>"
        },
        "parameterTemplate":{
          "shape":"WorkflowParameterTemplate",
          "documentation":"<p>A parameter template for the workflow.</p>"
        },
        "requestId":{
          "shape":"WorkflowRequestId",
          "documentation":"<p>A request ID for the workflow.</p>",
          "idempotencyToken":true
        },
        "storageCapacity":{
          "shape":"CreateWorkflowRequestStorageCapacityInteger",
          "documentation":"<p>A storage capacity for the workflow.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the workflow.</p>"
        }
      }
    },
    "CreateWorkflowRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "CreateWorkflowResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowArn",
          "documentation":"<p>The workflow's ARN.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow's status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The workflow's tags.</p>"
        }
      }
    },
    "CreationTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "DeleteAnnotationStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "force":{
          "shape":"PrimitiveBoolean",
          "documentation":"<p>Whether to force deletion.</p>",
          "location":"querystring",
          "locationName":"force"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "DeleteAnnotationStoreResponse":{
      "type":"structure",
      "required":["status"],
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        }
      }
    },
    "DeleteReferenceRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "DeleteReferenceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteReferenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteReferenceStoreResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteRunGroupRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The run group's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteRunRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteSequenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The sequence store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "DeleteSequenceStoreResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteVariantStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "force":{
          "shape":"PrimitiveBoolean",
          "documentation":"<p>Whether to force deletion.</p>",
          "location":"querystring",
          "locationName":"force"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "DeleteVariantStoreResponse":{
      "type":"structure",
      "required":["status"],
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        }
      }
    },
    "DeleteWorkflowRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "Encoding":{
      "type":"string",
      "max":20,
      "min":1
    },
    "EncryptionType":{
      "type":"string",
      "enum":["KMS"]
    },
    "EscapeChar":{
      "type":"string",
      "max":1,
      "min":1
    },
    "EscapeQuotes":{"type":"boolean"},
    "ExportJobId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "ExportReadSet":{
      "type":"structure",
      "required":["readSetId"],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The set's ID.</p>"
        }
      },
      "documentation":"<p>A read set.</p>"
    },
    "ExportReadSetDetail":{
      "type":"structure",
      "required":[
        "id",
        "status"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The set's ID.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobItemStatus",
          "documentation":"<p>The set's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The set's status message.</p>"
        }
      },
      "documentation":"<p>Details about a read set.</p>"
    },
    "ExportReadSetDetailList":{
      "type":"list",
      "member":{"shape":"ExportReadSetDetail"}
    },
    "ExportReadSetFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>An read set export job filter.</p>"
    },
    "ExportReadSetJobDetail":{
      "type":"structure",
      "required":[
        "creationTime",
        "destination",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>The job's destination in Amazon S3.</p>"
        },
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      },
      "documentation":"<p>Details about a read set export job.</p>"
    },
    "ExportReadSetJobDetailList":{
      "type":"list",
      "member":{"shape":"ExportReadSetJobDetail"}
    },
    "FileInformation":{
      "type":"structure",
      "members":{
        "contentLength":{
          "shape":"FileInformationContentLengthLong",
          "documentation":"<p>The file's content length.</p>"
        },
        "partSize":{
          "shape":"FileInformationPartSizeLong",
          "documentation":"<p>The file's part size.</p>"
        },
        "totalParts":{
          "shape":"FileInformationTotalPartsInteger",
          "documentation":"<p>The file's total parts.</p>"
        }
      },
      "documentation":"<p>Details about a file.</p>"
    },
    "FileInformationContentLengthLong":{
      "type":"long",
      "box":true,
      "max":5497558138880,
      "min":1
    },
    "FileInformationPartSizeLong":{
      "type":"long",
      "box":true,
      "max":5368709120,
      "min":1
    },
    "FileInformationTotalPartsInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "FileType":{
      "type":"string",
      "enum":[
        "FASTQ",
        "BAM",
        "CRAM"
      ]
    },
    "FormatOptions":{
      "type":"structure",
      "members":{
        "tsvOptions":{
          "shape":"TsvOptions",
          "documentation":"<p>Options for a TSV file.</p>"
        },
        "vcfOptions":{
          "shape":"VcfOptions",
          "documentation":"<p>Options for a VCF file.</p>"
        }
      },
      "documentation":"<p>Formatting options for a file.</p>",
      "union":true
    },
    "FormatToHeader":{
      "type":"map",
      "key":{"shape":"FormatToHeaderKey"},
      "value":{"shape":"FormatToHeaderValueString"}
    },
    "FormatToHeaderKey":{
      "type":"string",
      "enum":[
        "CHR",
        "START",
        "END",
        "REF",
        "ALT",
        "POS"
      ]
    },
    "FormatToHeaderValueString":{
      "type":"string",
      "max":1000,
      "min":0
    },
    "GeneratedFrom":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "GetAnnotationImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "GetAnnotationImportResponse":{
      "type":"structure",
      "required":[
        "completionTime",
        "creationTime",
        "destinationName",
        "formatOptions",
        "id",
        "items",
        "roleArn",
        "runLeftNormalization",
        "status",
        "statusMessage",
        "updateTime"
      ],
      "members":{
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>The job's destination annotation store.</p>"
        },
        "formatOptions":{"shape":"FormatOptions"},
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        },
        "items":{
          "shape":"AnnotationImportItemDetails",
          "documentation":"<p>The job's imported items.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMsg",
          "documentation":"<p>The job's status message.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        }
      }
    },
    "GetAnnotationStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "GetAnnotationStoreResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "description",
        "id",
        "name",
        "reference",
        "sseConfig",
        "status",
        "statusMessage",
        "storeArn",
        "storeSizeBytes",
        "tags",
        "updateTime"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>A status message.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The store's annotation file format.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>The store's parsing options.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The store's tags.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      }
    },
    "GetReadSetActivationJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetActivationJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "sources":{
          "shape":"ActivateReadSetSourceList",
          "documentation":"<p>The job's sources.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        }
      }
    },
    "GetReadSetExportJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetExportJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "destination",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>The job's destination in Amazon S3.</p>"
        },
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "readSets":{
          "shape":"ExportReadSetDetailList",
          "documentation":"<p>The job's read sets.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        }
      }
    },
    "GetReadSetImportJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetImportJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "roleArn",
        "sequenceStoreId",
        "sources",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "sources":{
          "shape":"ImportReadSetSourceList",
          "documentation":"<p>The job's sources.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        }
      }
    },
    "GetReadSetMetadataRequest":{
      "type":"structure",
      "required":[
        "id",
        "sequenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetMetadataResponse":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "fileType",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "arn":{
          "shape":"ReadSetArn",
          "documentation":"<p>The read set's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the read set was created.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The read set's description.</p>"
        },
        "fileType":{
          "shape":"FileType",
          "documentation":"<p>The read set's file type.</p>"
        },
        "files":{
          "shape":"ReadSetFiles",
          "documentation":"<p>The read set's files.</p>"
        },
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The read set's name.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The read set's genome reference ARN.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The read set's sample ID.</p>"
        },
        "sequenceInformation":{
          "shape":"SequenceInformation",
          "documentation":"<p>The read set's sequence information.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetStatus",
          "documentation":"<p>The read set's status.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The read set's subject ID.</p>"
        }
      }
    },
    "GetReadSetRequest":{
      "type":"structure",
      "required":[
        "id",
        "partNumber",
        "sequenceStoreId"
      ],
      "members":{
        "file":{
          "shape":"ReadSetFile",
          "documentation":"<p>The file to retrieve.</p>",
          "location":"querystring",
          "locationName":"file"
        },
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "partNumber":{
          "shape":"GetReadSetRequestPartNumberInteger",
          "documentation":"<p>The part number to retrieve.</p>",
          "location":"querystring",
          "locationName":"partNumber"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "GetReadSetRequestPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "GetReadSetResponse":{
      "type":"structure",
      "members":{
        "payload":{
          "shape":"ReadSetStreamingBlob",
          "documentation":"<p>The read set file payload.</p>"
        }
      },
      "payload":"payload"
    },
    "GetReferenceImportJobRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "GetReferenceImportJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "referenceStoreId",
        "roleArn",
        "sources",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "sources":{
          "shape":"ImportReferenceSourceList",
          "documentation":"<p>The job's sources.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The job's status message.</p>"
        }
      }
    },
    "GetReferenceMetadataRequest":{
      "type":"structure",
      "required":[
        "id",
        "referenceStoreId"
      ],
      "members":{
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "GetReferenceMetadataResponse":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id",
        "md5",
        "referenceStoreId",
        "updateTime"
      ],
      "members":{
        "arn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The reference's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was created.</p>"
        },
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The reference's description.</p>"
        },
        "files":{
          "shape":"ReferenceFiles",
          "documentation":"<p>The reference's files.</p>"
        },
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>"
        },
        "md5":{
          "shape":"Md5",
          "documentation":"<p>The reference's MD5 checksum.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The reference's name.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's reference store ID.</p>"
        },
        "status":{
          "shape":"ReferenceStatus",
          "documentation":"<p>The reference's status.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was updated.</p>"
        }
      }
    },
    "GetReferenceRequest":{
      "type":"structure",
      "required":[
        "id",
        "partNumber",
        "referenceStoreId"
      ],
      "members":{
        "file":{
          "shape":"ReferenceFile",
          "documentation":"<p>The file to retrieve.</p>",
          "location":"querystring",
          "locationName":"file"
        },
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "partNumber":{
          "shape":"GetReferenceRequestPartNumberInteger",
          "documentation":"<p>The part number to retrieve.</p>",
          "location":"querystring",
          "locationName":"partNumber"
        },
        "range":{
          "shape":"Range",
          "documentation":"<p>The range to retrieve.</p>",
          "location":"header",
          "locationName":"Range"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "GetReferenceRequestPartNumberInteger":{
      "type":"integer",
      "box":true,
      "max":10000,
      "min":1
    },
    "GetReferenceResponse":{
      "type":"structure",
      "members":{
        "payload":{
          "shape":"ReferenceStreamingBlob",
          "documentation":"<p>The reference file payload.</p>"
        }
      },
      "payload":"payload"
    },
    "GetReferenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetReferenceStoreResponse":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id"
      ],
      "members":{
        "arn":{
          "shape":"ReferenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        }
      }
    },
    "GetRunGroupRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetRunGroupResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunGroupArn",
          "documentation":"<p>The group's ARN.</p>"
        },
        "creationTime":{
          "shape":"RunGroupTimestamp",
          "documentation":"<p>When the group was created.</p>"
        },
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>"
        },
        "maxCpus":{
          "shape":"GetRunGroupResponseMaxCpusInteger",
          "documentation":"<p>The group's maximum number of CPUs to use.</p>"
        },
        "maxDuration":{
          "shape":"GetRunGroupResponseMaxDurationInteger",
          "documentation":"<p>The group's maximum run duration.</p>"
        },
        "maxRuns":{
          "shape":"GetRunGroupResponseMaxRunsInteger",
          "documentation":"<p>The maximum number of concurrent runs for the group.</p>"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>The group's name.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The group's tags.</p>"
        }
      }
    },
    "GetRunGroupResponseMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunGroupResponseMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunGroupResponseMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "GetRunRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "export":{
          "shape":"RunExportList",
          "documentation":"<p>The run's export format.</p>",
          "location":"querystring",
          "locationName":"export"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetRunResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunArn",
          "documentation":"<p>The run's ARN.</p>"
        },
        "creationTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run was created.</p>"
        },
        "definition":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The run's definition.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The run's digest.</p>"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "logLevel":{
          "shape":"RunLogLevel",
          "documentation":"<p>The run's log level.</p>"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>The run's name.</p>"
        },
        "outputUri":{
          "shape":"RunOutputUri",
          "documentation":"<p>The run's output URI.</p>"
        },
        "parameters":{
          "shape":"RunParameters",
          "documentation":"<p>The run's parameters.</p>"
        },
        "priority":{
          "shape":"GetRunResponsePriorityInteger",
          "documentation":"<p>The run's priority.</p>"
        },
        "resourceDigests":{
          "shape":"RunResourceDigests",
          "documentation":"<p>The run's resource digests.</p>"
        },
        "roleArn":{
          "shape":"RunRoleArn",
          "documentation":"<p>The run's service role ARN.</p>"
        },
        "runGroupId":{
          "shape":"RunGroupId",
          "documentation":"<p>The run's group ID.</p>"
        },
        "runId":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "startTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run started.</p>"
        },
        "startedBy":{
          "shape":"RunStartedBy",
          "documentation":"<p>Who started the run.</p>"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The run's status.</p>"
        },
        "statusMessage":{
          "shape":"RunStatusMessage",
          "documentation":"<p>The run's status message.</p>"
        },
        "stopTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>The run's stop time.</p>"
        },
        "storageCapacity":{
          "shape":"GetRunResponseStorageCapacityInteger",
          "documentation":"<p>The run's storage capacity.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The run's tags.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The run's workflow ID.</p>"
        },
        "workflowType":{
          "shape":"WorkflowType",
          "documentation":"<p>The run's workflow type.</p>"
        }
      }
    },
    "GetRunResponsePriorityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "GetRunResponseStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "GetRunTaskRequest":{
      "type":"structure",
      "required":[
        "id",
        "taskId"
      ],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The task's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "taskId":{
          "shape":"TaskId",
          "documentation":"<p>The task's ID.</p>",
          "location":"uri",
          "locationName":"taskId"
        }
      }
    },
    "GetRunTaskResponse":{
      "type":"structure",
      "members":{
        "cpus":{
          "shape":"GetRunTaskResponseCpusInteger",
          "documentation":"<p>The task's CPU usage.</p>"
        },
        "creationTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task was created.</p>"
        },
        "logStream":{
          "shape":"TaskLogStream",
          "documentation":"<p>The task's log stream.</p>"
        },
        "memory":{
          "shape":"GetRunTaskResponseMemoryInteger",
          "documentation":"<p>The task's memory setting.</p>"
        },
        "name":{
          "shape":"TaskName",
          "documentation":"<p>The task's name.</p>"
        },
        "startTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>The task's start time.</p>"
        },
        "status":{
          "shape":"TaskStatus",
          "documentation":"<p>The task's status.</p>"
        },
        "statusMessage":{
          "shape":"TaskStatusMessage",
          "documentation":"<p>The task's status message.</p>"
        },
        "stopTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>The task's stop time.</p>"
        },
        "taskId":{
          "shape":"TaskId",
          "documentation":"<p>The task's ID.</p>"
        }
      }
    },
    "GetRunTaskResponseCpusInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "GetRunTaskResponseMemoryInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "GetSequenceStoreRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>",
          "location":"uri",
          "locationName":"id"
        }
      }
    },
    "GetSequenceStoreResponse":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id"
      ],
      "members":{
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        }
      }
    },
    "GetVariantImportRequest":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>",
          "location":"uri",
          "locationName":"jobId"
        }
      }
    },
    "GetVariantImportResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "destinationName",
        "id",
        "items",
        "roleArn",
        "runLeftNormalization",
        "status",
        "statusMessage",
        "updateTime"
      ],
      "members":{
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>The job's destination variant store.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        },
        "items":{
          "shape":"VariantImportItemDetails",
          "documentation":"<p>The job's items.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMsg",
          "documentation":"<p>The job's status message.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        }
      }
    },
    "GetVariantStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "GetVariantStoreResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "description",
        "id",
        "name",
        "reference",
        "sseConfig",
        "status",
        "statusMessage",
        "storeArn",
        "storeSizeBytes",
        "tags",
        "updateTime"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The store's status message.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The store's tags.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      }
    },
    "GetWorkflowRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "export":{
          "shape":"WorkflowExportList",
          "documentation":"<p>The export format for the workflow.</p>",
          "location":"querystring",
          "locationName":"export"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type.</p>",
          "location":"querystring",
          "locationName":"type"
        }
      }
    },
    "GetWorkflowResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowArn",
          "documentation":"<p>The workflow's ARN.</p>"
        },
        "creationTime":{
          "shape":"WorkflowTimestamp",
          "documentation":"<p>When the workflow was created.</p>"
        },
        "definition":{
          "shape":"WorkflowDefinition",
          "documentation":"<p>The workflow's definition.</p>"
        },
        "description":{
          "shape":"WorkflowDescription",
          "documentation":"<p>The workflow's description.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The workflow's digest.</p>"
        },
        "engine":{
          "shape":"WorkflowEngine",
          "documentation":"<p>The workflow's engine.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "main":{
          "shape":"WorkflowMain",
          "documentation":"<p>The path of the main definition file for the workflow.</p>"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>The workflow's name.</p>"
        },
        "parameterTemplate":{
          "shape":"WorkflowParameterTemplate",
          "documentation":"<p>The workflow's parameter template.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow's status.</p>"
        },
        "statusMessage":{
          "shape":"WorkflowStatusMessage",
          "documentation":"<p>The workflow's status message.</p>"
        },
        "storageCapacity":{
          "shape":"GetWorkflowResponseStorageCapacityInteger",
          "documentation":"<p>The workflow's storage capacity.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The workflow's tags.</p>"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type.</p>"
        }
      }
    },
    "GetWorkflowResponseStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "Header":{"type":"boolean"},
    "ImportJobId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "ImportReadSetFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for import read set jobs.</p>"
    },
    "ImportReadSetJobItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "roleArn",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The job's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      },
      "documentation":"<p>An import read set job.</p>"
    },
    "ImportReadSetJobList":{
      "type":"list",
      "member":{"shape":"ImportReadSetJobItem"}
    },
    "ImportReadSetSourceItem":{
      "type":"structure",
      "required":[
        "sampleId",
        "sourceFileType",
        "sourceFiles",
        "status",
        "subjectId"
      ],
      "members":{
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the source originated.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The source's name.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The source's genome reference ARN.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The source's sample ID.</p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p>The source's file type.</p>"
        },
        "sourceFiles":{
          "shape":"SourceFiles",
          "documentation":"<p>The source files' location in Amazon S3.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobItemStatus",
          "documentation":"<p>The source's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The source's status message.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The source's subject ID.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        }
      },
      "documentation":"<p>A source for an import read set job.</p>"
    },
    "ImportReadSetSourceList":{
      "type":"list",
      "member":{"shape":"ImportReadSetSourceItem"}
    },
    "ImportReferenceFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for import references.</p>"
    },
    "ImportReferenceJobItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "referenceStoreId",
        "roleArn",
        "status"
      ],
      "members":{
        "completionTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      },
      "documentation":"<p>An import reference job.</p>"
    },
    "ImportReferenceJobList":{
      "type":"list",
      "member":{"shape":"ImportReferenceJobItem"}
    },
    "ImportReferenceSourceItem":{
      "type":"structure",
      "required":["status"],
      "members":{
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The source's name.</p>"
        },
        "sourceFile":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobItemStatus",
          "documentation":"<p>The source's status.</p>"
        },
        "statusMessage":{
          "shape":"JobStatusMessage",
          "documentation":"<p>The source's status message.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        }
      },
      "documentation":"<p>An genome reference source.</p>"
    },
    "ImportReferenceSourceList":{
      "type":"list",
      "member":{"shape":"ImportReferenceSourceItem"}
    },
    "InternalServerException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>An unexpected error occurred. Try the request again.</p>",
      "error":{"httpStatusCode":500},
      "exception":true,
      "fault":true,
      "retryable":{"throttling":false}
    },
    "JobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLED",
        "COMPLETED",
        "FAILED"
      ]
    },
    "JobStatusMessage":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "JobStatusMsg":{"type":"string"},
    "LineSep":{
      "type":"string",
      "max":20,
      "min":1
    },
    "ListAnnotationImportJobsFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "storeName":{
          "shape":"String",
          "documentation":"<p>A store name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for annotation import jobs.</p>"
    },
    "ListAnnotationImportJobsRequest":{
      "type":"structure",
      "members":{
        "filter":{
          "shape":"ListAnnotationImportJobsFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "ids":{
          "shape":"ListAnnotationImportJobsRequestIdsList",
          "documentation":"<p>IDs of annotation import jobs to retrieve.</p>"
        },
        "maxResults":{
          "shape":"ListAnnotationImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"ListAnnotationImportJobsRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListAnnotationImportJobsRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListAnnotationImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListAnnotationImportJobsRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListAnnotationImportJobsResponse":{
      "type":"structure",
      "members":{
        "annotationImportJobs":{
          "shape":"AnnotationImportJobItems",
          "documentation":"<p>A list of jobs.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListAnnotationStoresFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for annotation stores.</p>"
    },
    "ListAnnotationStoresRequest":{
      "type":"structure",
      "members":{
        "filter":{
          "shape":"ListAnnotationStoresFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "ids":{
          "shape":"ListAnnotationStoresRequestIdsList",
          "documentation":"<p>IDs of stores to list.</p>"
        },
        "maxResults":{
          "shape":"ListAnnotationStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"ListAnnotationStoresRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListAnnotationStoresRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListAnnotationStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListAnnotationStoresRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListAnnotationStoresResponse":{
      "type":"structure",
      "members":{
        "annotationStores":{
          "shape":"AnnotationStoreItems",
          "documentation":"<p>A list of stores.</p>"
        },
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListReadSetActivationJobsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "filter":{
          "shape":"ActivateReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReadSetActivationJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of read set activation jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "ListReadSetActivationJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetActivationJobsResponse":{
      "type":"structure",
      "members":{
        "activationJobs":{
          "shape":"ActivateReadSetJobList",
          "documentation":"<p>A list of jobs.</p>"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListReadSetExportJobsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "filter":{
          "shape":"ExportReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReadSetExportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The jobs' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "ListReadSetExportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetExportJobsResponse":{
      "type":"structure",
      "members":{
        "exportJobs":{
          "shape":"ExportReadSetJobDetailList",
          "documentation":"<p>A list of jobs.</p>"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListReadSetImportJobsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "filter":{
          "shape":"ImportReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReadSetImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The jobs' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "ListReadSetImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetImportJobsResponse":{
      "type":"structure",
      "members":{
        "importJobs":{
          "shape":"ImportReadSetJobList",
          "documentation":"<p>A list of jobs.</p>"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListReadSetsRequest":{
      "type":"structure",
      "required":["sequenceStoreId"],
      "members":{
        "filter":{
          "shape":"ReadSetFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReadSetsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of read sets to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The jobs' sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        }
      }
    },
    "ListReadSetsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReadSetsResponse":{
      "type":"structure",
      "required":["readSets"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "readSets":{
          "shape":"ReadSetList",
          "documentation":"<p>A list of read sets.</p>"
        }
      }
    },
    "ListReferenceImportJobsRequest":{
      "type":"structure",
      "required":["referenceStoreId"],
      "members":{
        "filter":{
          "shape":"ImportReferenceFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReferenceImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "ListReferenceImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReferenceImportJobsResponse":{
      "type":"structure",
      "members":{
        "importJobs":{
          "shape":"ImportReferenceJobList",
          "documentation":"<p>A lis of jobs.</p>"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListReferenceStoresRequest":{
      "type":"structure",
      "members":{
        "filter":{
          "shape":"ReferenceStoreFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReferenceStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListReferenceStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReferenceStoresResponse":{
      "type":"structure",
      "required":["referenceStores"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "referenceStores":{
          "shape":"ReferenceStoreDetailList",
          "documentation":"<p>A list of reference stores.</p>"
        }
      }
    },
    "ListReferencesRequest":{
      "type":"structure",
      "required":["referenceStoreId"],
      "members":{
        "filter":{
          "shape":"ReferenceFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListReferencesRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of references to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The references' reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        }
      }
    },
    "ListReferencesRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListReferencesResponse":{
      "type":"structure",
      "required":["references"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "references":{
          "shape":"ReferenceList",
          "documentation":"<p>A list of references.</p>"
        }
      }
    },
    "ListRunGroupsRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListRunGroupsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of run groups to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>The run groups' name.</p>",
          "location":"querystring",
          "locationName":"name"
        },
        "startingToken":{
          "shape":"RunGroupListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        }
      }
    },
    "ListRunGroupsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunGroupsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"RunGroupList",
          "documentation":"<p>A list of groups.</p>"
        },
        "nextToken":{
          "shape":"RunGroupListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListRunTasksRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "maxResults":{
          "shape":"ListRunTasksRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of run tasks to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "startingToken":{
          "shape":"TaskListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "status":{
          "shape":"TaskStatus",
          "documentation":"<p>Filter the list by status.</p>",
          "location":"querystring",
          "locationName":"status"
        }
      }
    },
    "ListRunTasksRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunTasksResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"TaskList",
          "documentation":"<p>A list of tasks.</p>"
        },
        "nextToken":{
          "shape":"TaskListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListRunsRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListRunsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of runs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>Filter the list by run name.</p>",
          "location":"querystring",
          "locationName":"name"
        },
        "runGroupId":{
          "shape":"RunGroupId",
          "documentation":"<p>Filter the list by run group ID.</p>",
          "location":"querystring",
          "locationName":"runGroupId"
        },
        "startingToken":{
          "shape":"RunListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        }
      }
    },
    "ListRunsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListRunsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"RunList",
          "documentation":"<p>A list of runs.</p>"
        },
        "nextToken":{
          "shape":"RunListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "ListSequenceStoresRequest":{
      "type":"structure",
      "members":{
        "filter":{
          "shape":"SequenceStoreFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "maxResults":{
          "shape":"ListSequenceStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListSequenceStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListSequenceStoresResponse":{
      "type":"structure",
      "required":["sequenceStores"],
      "members":{
        "nextToken":{
          "shape":"NextToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "sequenceStores":{
          "shape":"SequenceStoreDetailList",
          "documentation":"<p>A list of sequence stores.</p>"
        }
      }
    },
    "ListTagsForResourceRequest":{
      "type":"structure",
      "required":["resourceArn"],
      "members":{
        "resourceArn":{
          "shape":"TagArn",
          "documentation":"<p>The resource's ARN.</p>",
          "location":"uri",
          "locationName":"resourceArn"
        }
      }
    },
    "ListTagsForResourceResponse":{
      "type":"structure",
      "required":["tags"],
      "members":{
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>A list of tags.</p>"
        }
      }
    },
    "ListVariantImportJobsFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>A status to filter on.</p>"
        },
        "storeName":{
          "shape":"String",
          "documentation":"<p>A store name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for variant import jobs.</p>"
    },
    "ListVariantImportJobsRequest":{
      "type":"structure",
      "members":{
        "filter":{
          "shape":"ListVariantImportJobsFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "ids":{
          "shape":"ListVariantImportJobsRequestIdsList",
          "documentation":"<p>A list of job IDs.</p>"
        },
        "maxResults":{
          "shape":"ListVariantImportJobsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of import jobs to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"ListVariantImportJobsRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListVariantImportJobsRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListVariantImportJobsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListVariantImportJobsRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListVariantImportJobsResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "variantImportJobs":{
          "shape":"VariantImportJobItems",
          "documentation":"<p>A list of jobs.</p>"
        }
      }
    },
    "ListVariantStoresFilter":{
      "type":"structure",
      "members":{
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for variant stores.</p>"
    },
    "ListVariantStoresRequest":{
      "type":"structure",
      "members":{
        "filter":{
          "shape":"ListVariantStoresFilter",
          "documentation":"<p>A filter to apply to the list.</p>"
        },
        "ids":{
          "shape":"ListVariantStoresRequestIdsList",
          "documentation":"<p>A list of store IDs.</p>"
        },
        "maxResults":{
          "shape":"ListVariantStoresRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of stores to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "nextToken":{
          "shape":"ListVariantStoresRequestNextTokenString",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"nextToken"
        }
      }
    },
    "ListVariantStoresRequestIdsList":{
      "type":"list",
      "member":{"shape":"ResourceIdentifier"},
      "max":20,
      "min":1
    },
    "ListVariantStoresRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListVariantStoresRequestNextTokenString":{
      "type":"string",
      "max":10000,
      "min":1
    },
    "ListVariantStoresResponse":{
      "type":"structure",
      "members":{
        "nextToken":{
          "shape":"String",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        },
        "variantStores":{
          "shape":"VariantStoreItems",
          "documentation":"<p>A list of variant stores.</p>"
        }
      }
    },
    "ListWorkflowsRequest":{
      "type":"structure",
      "members":{
        "maxResults":{
          "shape":"ListWorkflowsRequestMaxResultsInteger",
          "documentation":"<p>The maximum number of workflows to return in one page of results.</p>",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>The workflows' name.</p>",
          "location":"querystring",
          "locationName":"name"
        },
        "startingToken":{
          "shape":"WorkflowListToken",
          "documentation":"<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
          "location":"querystring",
          "locationName":"startingToken"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflows' type.</p>",
          "location":"querystring",
          "locationName":"type"
        }
      }
    },
    "ListWorkflowsRequestMaxResultsInteger":{
      "type":"integer",
      "box":true,
      "max":100,
      "min":1
    },
    "ListWorkflowsResponse":{
      "type":"structure",
      "members":{
        "items":{
          "shape":"WorkflowList",
          "documentation":"<p>The workflows' items.</p>"
        },
        "nextToken":{
          "shape":"WorkflowListToken",
          "documentation":"<p>A pagination token that's included if more results are available.</p>"
        }
      }
    },
    "Long":{
      "type":"long",
      "box":true
    },
    "Md5":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"^[\\p{L}||\\p{N}]+$"
    },
    "NextToken":{
      "type":"string",
      "max":6144,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "PrimitiveBoolean":{"type":"boolean"},
    "Quote":{
      "type":"string",
      "max":1,
      "min":1
    },
    "QuoteAll":{"type":"boolean"},
    "Range":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{N}||\\p{P}]+$"
    },
    "RangeNotSatisfiableException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The ranges specified in the request are not valid.</p>",
      "error":{
        "httpStatusCode":416,
        "senderFault":true
      },
      "exception":true,
      "retryable":{"throttling":false}
    },
    "ReadOptions":{
      "type":"structure",
      "members":{
        "comment":{
          "shape":"CommentChar",
          "documentation":"<p>The file's comment character.</p>"
        },
        "encoding":{
          "shape":"Encoding",
          "documentation":"<p>The file's encoding.</p>"
        },
        "escape":{
          "shape":"EscapeChar",
          "documentation":"<p>A character for escaping quotes in the file.</p>"
        },
        "escapeQuotes":{
          "shape":"EscapeQuotes",
          "documentation":"<p>Whether quotes need to be escaped in the file.</p>"
        },
        "header":{
          "shape":"Header",
          "documentation":"<p>Whether the file has a header row.</p>"
        },
        "lineSep":{
          "shape":"LineSep",
          "documentation":"<p>A line separator for the file.</p>"
        },
        "quote":{
          "shape":"Quote",
          "documentation":"<p>The file's quote character.</p>"
        },
        "quoteAll":{
          "shape":"QuoteAll",
          "documentation":"<p>Whether all values need to be quoted, or just those that contain quotes.</p>"
        },
        "sep":{
          "shape":"Separator",
          "documentation":"<p>The file's field separator.</p>"
        }
      },
      "documentation":"<p>Read options for an annotation import job.</p>"
    },
    "ReadSetActivationJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReadSetActivationJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReadSetArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "ReadSetBatchError":{
      "type":"structure",
      "required":[
        "code",
        "id",
        "message"
      ],
      "members":{
        "code":{
          "shape":"String",
          "documentation":"<p>The error's code.</p>"
        },
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The error's ID.</p>"
        },
        "message":{
          "shape":"String",
          "documentation":"<p>The error's message.</p>"
        }
      },
      "documentation":"<p>An error from a batch read set operation.</p>"
    },
    "ReadSetBatchErrorList":{
      "type":"list",
      "member":{"shape":"ReadSetBatchError"}
    },
    "ReadSetDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ReadSetExportJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReadSetExportJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReadSetFile":{
      "type":"string",
      "enum":[
        "SOURCE1",
        "SOURCE2",
        "INDEX"
      ]
    },
    "ReadSetFiles":{
      "type":"structure",
      "members":{
        "index":{
          "shape":"FileInformation",
          "documentation":"<p>The files' index.</p>"
        },
        "source1":{
          "shape":"FileInformation",
          "documentation":"<p>The location of the first file in Amazon S3.</p>"
        },
        "source2":{
          "shape":"FileInformation",
          "documentation":"<p>The location of the second file in Amazon S3.</p>"
        }
      },
      "documentation":"<p>Files in a read set.</p>"
    },
    "ReadSetFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>A name to filter on.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>A genome reference ARN to filter on.</p>"
        },
        "status":{
          "shape":"ReadSetStatus",
          "documentation":"<p>A status to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for read sets.</p>"
    },
    "ReadSetId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "ReadSetIdList":{
      "type":"list",
      "member":{"shape":"ReadSetId"},
      "max":100,
      "min":1
    },
    "ReadSetImportJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReadSetImportJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReadSetList":{
      "type":"list",
      "member":{"shape":"ReadSetListItem"}
    },
    "ReadSetListItem":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "fileType",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "arn":{
          "shape":"ReadSetArn",
          "documentation":"<p>The read set's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the read set was created.</p>"
        },
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The read set's description.</p>"
        },
        "fileType":{
          "shape":"FileType",
          "documentation":"<p>The read set's file type.</p>"
        },
        "id":{
          "shape":"ReadSetId",
          "documentation":"<p>The read set's ID.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The read set's name.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The read set's genome reference ARN.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The read set's sample ID.</p>"
        },
        "sequenceInformation":{"shape":"SequenceInformation"},
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetStatus",
          "documentation":"<p>The read set's status.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The read set's subject ID.</p>"
        }
      },
      "documentation":"<p>A read set.</p>"
    },
    "ReadSetName":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ReadSetStatus":{
      "type":"string",
      "enum":[
        "ARCHIVED",
        "ACTIVATING",
        "ACTIVE",
        "DELETING",
        "DELETED"
      ]
    },
    "ReadSetStreamingBlob":{
      "type":"blob",
      "streaming":true
    },
    "ReferenceArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "ReferenceDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ReferenceFile":{
      "type":"string",
      "enum":[
        "SOURCE",
        "INDEX"
      ]
    },
    "ReferenceFiles":{
      "type":"structure",
      "members":{
        "index":{
          "shape":"FileInformation",
          "documentation":"<p>The files' index.</p>"
        },
        "source":{
          "shape":"FileInformation",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>A set of genome reference files.</p>"
    },
    "ReferenceFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "md5":{
          "shape":"Md5",
          "documentation":"<p>An MD5 checksum to filter on.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>A name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for references.</p>"
    },
    "ReferenceId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "ReferenceImportJobItemStatus":{
      "type":"string",
      "enum":[
        "NOT_STARTED",
        "IN_PROGRESS",
        "FINISHED",
        "FAILED"
      ]
    },
    "ReferenceImportJobStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "CANCELLING",
        "CANCELLED",
        "FAILED",
        "COMPLETED",
        "COMPLETED_WITH_FAILURES"
      ]
    },
    "ReferenceItem":{
      "type":"structure",
      "members":{
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The reference's ARN.</p>"
        }
      },
      "documentation":"<p>A genome reference.</p>",
      "union":true
    },
    "ReferenceList":{
      "type":"list",
      "member":{"shape":"ReferenceListItem"}
    },
    "ReferenceListItem":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id",
        "md5",
        "referenceStoreId",
        "updateTime"
      ],
      "members":{
        "arn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The reference's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was created.</p>"
        },
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The reference's description.</p>"
        },
        "id":{
          "shape":"ReferenceId",
          "documentation":"<p>The reference's ID.</p>"
        },
        "md5":{
          "shape":"Md5",
          "documentation":"<p>The reference's MD5 checksum.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The reference's name.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The reference's store ID.</p>"
        },
        "status":{
          "shape":"ReferenceStatus",
          "documentation":"<p>The reference's status.</p>"
        },
        "updateTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the reference was updated.</p>"
        }
      },
      "documentation":"<p>A genome reference.</p>"
    },
    "ReferenceName":{
      "type":"string",
      "max":255,
      "min":3,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ReferenceStatus":{
      "type":"string",
      "enum":[
        "ACTIVE",
        "DELETING",
        "DELETED"
      ]
    },
    "ReferenceStoreArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "ReferenceStoreDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ReferenceStoreDetail":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id"
      ],
      "members":{
        "arn":{
          "shape":"ReferenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"ReferenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        }
      },
      "documentation":"<p>Details about a reference store.</p>"
    },
    "ReferenceStoreDetailList":{
      "type":"list",
      "member":{"shape":"ReferenceStoreDetail"}
    },
    "ReferenceStoreFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "name":{
          "shape":"ReferenceStoreName",
          "documentation":"<p>The name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for reference stores.</p>"
    },
    "ReferenceStoreId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "ReferenceStoreName":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ReferenceStreamingBlob":{
      "type":"blob",
      "streaming":true
    },
    "RequestTimeoutException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request timed out.</p>",
      "error":{
        "httpStatusCode":408,
        "senderFault":true
      },
      "exception":true
    },
    "ResourceId":{
      "type":"string",
      "pattern":"^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
    },
    "ResourceIdentifier":{
      "type":"string",
      "max":50,
      "min":1
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The target resource was not found in the current Region.</p>",
      "error":{
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "RoleArn":{
      "type":"string",
      "max":2048,
      "min":20,
      "pattern":"^arn:.*"
    },
    "RunArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "RunExport":{
      "type":"string",
      "enum":["DEFINITION"],
      "max":64,
      "min":1
    },
    "RunExportList":{
      "type":"list",
      "member":{"shape":"RunExport"},
      "max":32,
      "min":0
    },
    "RunGroupArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "RunGroupId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"^[0-9]+$"
    },
    "RunGroupList":{
      "type":"list",
      "member":{"shape":"RunGroupListItem"}
    },
    "RunGroupListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunGroupArn",
          "documentation":"<p>The group's ARN.</p>"
        },
        "creationTime":{
          "shape":"RunGroupTimestamp",
          "documentation":"<p>When the group was created.</p>"
        },
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>"
        },
        "maxCpus":{
          "shape":"RunGroupListItemMaxCpusInteger",
          "documentation":"<p>The group's maximum CPU count setting.</p>"
        },
        "maxDuration":{
          "shape":"RunGroupListItemMaxDurationInteger",
          "documentation":"<p>The group's maximum duration setting.</p>"
        },
        "maxRuns":{
          "shape":"RunGroupListItemMaxRunsInteger",
          "documentation":"<p>The group's maximum concurrent run setting.</p>"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>The group's name.</p>"
        }
      },
      "documentation":"<p>A run group.</p>"
    },
    "RunGroupListItemMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListItemMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListItemMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "RunGroupListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunGroupName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunGroupRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunGroupTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "RunId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"^[0-9]+$"
    },
    "RunLeftNormalization":{"type":"boolean"},
    "RunList":{
      "type":"list",
      "member":{"shape":"RunListItem"}
    },
    "RunListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunArn",
          "documentation":"<p>The run's ARN.</p>"
        },
        "creationTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run was created.</p>"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>The run's name.</p>"
        },
        "priority":{
          "shape":"RunListItemPriorityInteger",
          "documentation":"<p>The run's priority.</p>"
        },
        "startTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run started.</p>"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The run's status.</p>"
        },
        "stopTime":{
          "shape":"RunTimestamp",
          "documentation":"<p>When the run stopped.</p>"
        },
        "storageCapacity":{
          "shape":"RunListItemStorageCapacityInteger",
          "documentation":"<p>The run's storage capacity.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The run's workflow ID.</p>"
        }
      },
      "documentation":"<p>A workflow run.</p>"
    },
    "RunListItemPriorityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "RunListItemStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "RunListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunLogLevel":{
      "type":"string",
      "enum":[
        "OFF",
        "FATAL",
        "ERROR",
        "ALL"
      ],
      "max":64,
      "min":1
    },
    "RunName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunOutputUri":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunParameters":{
      "type":"structure",
      "members":{
      },
      "document":true
    },
    "RunRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunResourceDigest":{
      "type":"string",
      "max":64,
      "min":0,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunResourceDigestKey":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunResourceDigests":{
      "type":"map",
      "key":{"shape":"RunResourceDigestKey"},
      "value":{"shape":"RunResourceDigest"}
    },
    "RunRoleArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "RunStartedBy":{
      "type":"string",
      "max":128,
      "min":1
    },
    "RunStatus":{
      "type":"string",
      "enum":[
        "PENDING",
        "STARTING",
        "RUNNING",
        "STOPPING",
        "COMPLETED",
        "DELETED",
        "CANCELLED",
        "FAILED"
      ],
      "max":64,
      "min":1
    },
    "RunStatusMessage":{
      "type":"string",
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "RunTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "S3Destination":{
      "type":"string",
      "pattern":"^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?$"
    },
    "S3Uri":{
      "type":"string",
      "pattern":"^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/(.{1,1024})$"
    },
    "SampleId":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "SchemaItem":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"SchemaValueType"},
      "max":1,
      "min":1
    },
    "SchemaValueType":{
      "type":"string",
      "enum":[
        "LONG",
        "INT",
        "STRING",
        "FLOAT",
        "DOUBLE",
        "BOOLEAN"
      ]
    },
    "Separator":{
      "type":"string",
      "max":20,
      "min":1
    },
    "SequenceInformation":{
      "type":"structure",
      "members":{
        "alignment":{
          "shape":"String",
          "documentation":"<p>The sequence's alignment setting.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the sequence originated.</p>"
        },
        "totalBaseCount":{
          "shape":"Long",
          "documentation":"<p>The sequence's total base count.</p>"
        },
        "totalReadCount":{
          "shape":"Long",
          "documentation":"<p>The sequence's total read count.</p>"
        }
      },
      "documentation":"<p>Details about a sequence.</p>"
    },
    "SequenceStoreArn":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "SequenceStoreDescription":{
      "type":"string",
      "max":255,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "SequenceStoreDetail":{
      "type":"structure",
      "required":[
        "arn",
        "creationTime",
        "id"
      ],
      "members":{
        "arn":{
          "shape":"SequenceStoreArn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"SequenceStoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>The store's name.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        }
      },
      "documentation":"<p>Details about a sequence store.</p>"
    },
    "SequenceStoreDetailList":{
      "type":"list",
      "member":{"shape":"SequenceStoreDetail"}
    },
    "SequenceStoreFilter":{
      "type":"structure",
      "members":{
        "createdAfter":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's start date.</p>"
        },
        "createdBefore":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>The filter's end date.</p>"
        },
        "name":{
          "shape":"SequenceStoreName",
          "documentation":"<p>A name to filter on.</p>"
        }
      },
      "documentation":"<p>A filter for a sequence store.</p>"
    },
    "SequenceStoreId":{
      "type":"string",
      "max":36,
      "min":10,
      "pattern":"^[0-9]+$"
    },
    "SequenceStoreName":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "ServiceQuotaExceededException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request exceeds a service quota.</p>",
      "error":{
        "httpStatusCode":402,
        "senderFault":true
      },
      "exception":true
    },
    "SourceFiles":{
      "type":"structure",
      "required":["source1"],
      "members":{
        "source1":{
          "shape":"S3Uri",
          "documentation":"<p>The location of the first file in Amazon S3.</p>"
        },
        "source2":{
          "shape":"S3Uri",
          "documentation":"<p>The location of the second file in Amazon S3.</p>"
        }
      },
      "documentation":"<p>Source files for a sequence.</p>"
    },
    "SseConfig":{
      "type":"structure",
      "required":["type"],
      "members":{
        "keyArn":{
          "shape":"SseConfigKeyArnString",
          "documentation":"<p>An encryption key ARN.</p>"
        },
        "type":{
          "shape":"EncryptionType",
          "documentation":"<p>The encryption type.</p>"
        }
      },
      "documentation":"<p>Server-side encryption (SSE) settings for a store.</p>"
    },
    "SseConfigKeyArnString":{
      "type":"string",
      "max":2048,
      "min":20,
      "pattern":"arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)"
    },
    "StartAnnotationImportRequest":{
      "type":"structure",
      "required":[
        "destinationName",
        "items",
        "roleArn"
      ],
      "members":{
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>A destination annotation store for the job.</p>"
        },
        "formatOptions":{
          "shape":"FormatOptions",
          "documentation":"<p>Formatting options for the annotation file.</p>"
        },
        "items":{
          "shape":"AnnotationImportItemSources",
          "documentation":"<p>Items to import.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        }
      }
    },
    "StartAnnotationImportResponse":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        }
      }
    },
    "StartReadSetActivationJobRequest":{
      "type":"structure",
      "required":[
        "sequenceStoreId",
        "sources"
      ],
      "members":{
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "sources":{
          "shape":"StartReadSetActivationJobRequestSourcesList",
          "documentation":"<p>The job's sources.</p>"
        }
      }
    },
    "StartReadSetActivationJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"StartReadSetActivationJobSourceItem"},
      "max":20,
      "min":1
    },
    "StartReadSetActivationJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ActivationJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetActivationJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      }
    },
    "StartReadSetActivationJobSourceItem":{
      "type":"structure",
      "required":["readSetId"],
      "members":{
        "readSetId":{
          "shape":"ReadSetId",
          "documentation":"<p>The source's read set ID.</p>"
        }
      },
      "documentation":"<p>A source for a read set activation job.</p>"
    },
    "StartReadSetExportJobRequest":{
      "type":"structure",
      "required":[
        "destination",
        "roleArn",
        "sequenceStoreId",
        "sources"
      ],
      "members":{
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>A location for exported files in Amazon S3.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "sources":{
          "shape":"StartReadSetExportJobRequestSourcesList",
          "documentation":"<p>Sources for the job.</p>"
        }
      }
    },
    "StartReadSetExportJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"ExportReadSet"},
      "max":100,
      "min":1
    },
    "StartReadSetExportJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "destination",
        "id",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "destination":{
          "shape":"S3Destination",
          "documentation":"<p>The job's output location.</p>"
        },
        "id":{
          "shape":"ExportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetExportJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      }
    },
    "StartReadSetImportJobRequest":{
      "type":"structure",
      "required":[
        "roleArn",
        "sequenceStoreId",
        "sources"
      ],
      "members":{
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>",
          "location":"uri",
          "locationName":"sequenceStoreId"
        },
        "sources":{
          "shape":"StartReadSetImportJobRequestSourcesList",
          "documentation":"<p>Source files to import.</p>"
        }
      }
    },
    "StartReadSetImportJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"StartReadSetImportJobSourceItem"},
      "max":100,
      "min":1
    },
    "StartReadSetImportJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "roleArn",
        "sequenceStoreId",
        "status"
      ],
      "members":{
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "sequenceStoreId":{
          "shape":"SequenceStoreId",
          "documentation":"<p>The read set's sequence store ID.</p>"
        },
        "status":{
          "shape":"ReadSetImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      }
    },
    "StartReadSetImportJobSourceItem":{
      "type":"structure",
      "required":[
        "referenceArn",
        "sampleId",
        "sourceFileType",
        "sourceFiles",
        "subjectId"
      ],
      "members":{
        "description":{
          "shape":"ReadSetDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "generatedFrom":{
          "shape":"GeneratedFrom",
          "documentation":"<p>Where the source originated.</p>"
        },
        "name":{
          "shape":"ReadSetName",
          "documentation":"<p>The source's name.</p>"
        },
        "referenceArn":{
          "shape":"ReferenceArn",
          "documentation":"<p>The source's reference ARN.</p>"
        },
        "sampleId":{
          "shape":"SampleId",
          "documentation":"<p>The source's sample ID.</p>"
        },
        "sourceFileType":{
          "shape":"FileType",
          "documentation":"<p>The source's file type.</p>"
        },
        "sourceFiles":{
          "shape":"SourceFiles",
          "documentation":"<p>The source files' location in Amazon S3.</p>"
        },
        "subjectId":{
          "shape":"SubjectId",
          "documentation":"<p>The source's subject ID.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        }
      },
      "documentation":"<p>A source for a read set import job.</p>"
    },
    "StartReferenceImportJobRequest":{
      "type":"structure",
      "required":[
        "referenceStoreId",
        "roleArn",
        "sources"
      ],
      "members":{
        "clientToken":{
          "shape":"ClientToken",
          "documentation":"<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>",
          "location":"uri",
          "locationName":"referenceStoreId"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "sources":{
          "shape":"StartReferenceImportJobRequestSourcesList",
          "documentation":"<p>Sources for the job.</p>"
        }
      }
    },
    "StartReferenceImportJobRequestSourcesList":{
      "type":"list",
      "member":{"shape":"StartReferenceImportJobSourceItem"},
      "max":100,
      "min":1
    },
    "StartReferenceImportJobResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "id",
        "referenceStoreId",
        "roleArn",
        "status"
      ],
      "members":{
        "creationTime":{
          "shape":"SyntheticTimestamp_date_time",
          "documentation":"<p>When the job was created.</p>"
        },
        "id":{
          "shape":"ImportJobId",
          "documentation":"<p>The job's ID.</p>"
        },
        "referenceStoreId":{
          "shape":"ReferenceStoreId",
          "documentation":"<p>The job's reference store ID.</p>"
        },
        "roleArn":{
          "shape":"RoleArn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "status":{
          "shape":"ReferenceImportJobStatus",
          "documentation":"<p>The job's status.</p>"
        }
      }
    },
    "StartReferenceImportJobSourceItem":{
      "type":"structure",
      "required":[
        "name",
        "sourceFile"
      ],
      "members":{
        "description":{
          "shape":"ReferenceDescription",
          "documentation":"<p>The source's description.</p>"
        },
        "name":{
          "shape":"ReferenceName",
          "documentation":"<p>The source's name.</p>"
        },
        "sourceFile":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The source's tags.</p>"
        }
      },
      "documentation":"<p>A source for a reference import job.</p>"
    },
    "StartRunRequest":{
      "type":"structure",
      "required":[
        "requestId",
        "roleArn"
      ],
      "members":{
        "logLevel":{
          "shape":"RunLogLevel",
          "documentation":"<p>A log level for the run.</p>"
        },
        "name":{
          "shape":"RunName",
          "documentation":"<p>A name for the run.</p>"
        },
        "outputUri":{
          "shape":"RunOutputUri",
          "documentation":"<p>An output URI for the run.</p>"
        },
        "parameters":{
          "shape":"RunParameters",
          "documentation":"<p>Parameters for the run.</p>"
        },
        "priority":{
          "shape":"StartRunRequestPriorityInteger",
          "documentation":"<p>A priority for the run.</p>"
        },
        "requestId":{
          "shape":"RunRequestId",
          "documentation":"<p>A request ID for the run.</p>",
          "idempotencyToken":true
        },
        "roleArn":{
          "shape":"RunRoleArn",
          "documentation":"<p>A service role for the run.</p>"
        },
        "runGroupId":{
          "shape":"RunGroupId",
          "documentation":"<p>The run's group ID.</p>"
        },
        "runId":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "storageCapacity":{
          "shape":"StartRunRequestStorageCapacityInteger",
          "documentation":"<p>A storage capacity for the run.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>Tags for the run.</p>"
        },
        "workflowId":{
          "shape":"WorkflowId",
          "documentation":"<p>The run's workflow ID.</p>"
        },
        "workflowType":{
          "shape":"WorkflowType",
          "documentation":"<p>The run's workflows type.</p>"
        }
      }
    },
    "StartRunRequestPriorityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "StartRunRequestStorageCapacityInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":0
    },
    "StartRunResponse":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"RunArn",
          "documentation":"<p>The run's ARN.</p>"
        },
        "id":{
          "shape":"RunId",
          "documentation":"<p>The run's ID.</p>"
        },
        "status":{
          "shape":"RunStatus",
          "documentation":"<p>The run's status.</p>"
        },
        "tags":{
          "shape":"TagMap",
          "documentation":"<p>The run's tags.</p>"
        }
      }
    },
    "StartVariantImportRequest":{
      "type":"structure",
      "required":[
        "destinationName",
        "items",
        "roleArn"
      ],
      "members":{
        "destinationName":{
          "shape":"StoreName",
          "documentation":"<p>The destination variant store for the job.</p>"
        },
        "items":{
          "shape":"VariantImportItemSources",
          "documentation":"<p>Items to import.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>A service role for the job.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        }
      }
    },
    "StartVariantImportResponse":{
      "type":"structure",
      "required":["jobId"],
      "members":{
        "jobId":{
          "shape":"ResourceId",
          "documentation":"<p>The job's ID.</p>"
        }
      }
    },
    "StatusMessage":{
      "type":"string",
      "max":1000,
      "min":0
    },
    "StoreDescription":{
      "type":"string",
      "max":500,
      "min":0
    },
    "StoreFormat":{
      "type":"string",
      "enum":[
        "GFF",
        "TSV",
        "VCF"
      ]
    },
    "StoreName":{
      "type":"string",
      "max":255,
      "min":3,
      "pattern":"^([a-z]){1}([a-z0-9_]){2,254}$"
    },
    "StoreOptions":{
      "type":"structure",
      "members":{
        "tsvStoreOptions":{
          "shape":"TsvStoreOptions",
          "documentation":"<p>File settings for a TSV store.</p>"
        }
      },
      "documentation":"<p>Settings for a store.</p>",
      "union":true
    },
    "StoreStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE",
        "FAILED"
      ]
    },
    "String":{"type":"string"},
    "SubjectId":{
      "type":"string",
      "max":127,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "SyntheticTimestamp_date_time":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "TagArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "TagKey":{
      "type":"string",
      "max":128,
      "min":1
    },
    "TagKeyList":{
      "type":"list",
      "member":{"shape":"TagKey"},
      "max":50,
      "min":0
    },
    "TagMap":{
      "type":"map",
      "key":{"shape":"TagKey"},
      "value":{"shape":"TagValue"}
    },
    "TagResourceRequest":{
      "type":"structure",
      "required":[
        "resourceArn",
        "tags"
      ],
      "members":{
        "resourceArn":{
          "shape":"TagArn",
          "documentation":"<p>The resource's ARN.</p>",
          "location":"uri",
          "locationName":"resourceArn"
        },
        "tags":{
          "shape":"TagResourceRequestTagsMap",
          "documentation":"<p>Tags for the resource.</p>"
        }
      }
    },
    "TagResourceRequestTagsMap":{
      "type":"map",
      "key":{"shape":"TagKey"},
      "value":{"shape":"TagValue"},
      "max":50,
      "min":0
    },
    "TagResourceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "TagValue":{
      "type":"string",
      "max":256,
      "min":0
    },
    "TaskId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"^[0-9]+$"
    },
    "TaskList":{
      "type":"list",
      "member":{"shape":"TaskListItem"}
    },
    "TaskListItem":{
      "type":"structure",
      "members":{
        "cpus":{
          "shape":"TaskListItemCpusInteger",
          "documentation":"<p>The task's CPU count.</p>"
        },
        "creationTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task was created.</p>"
        },
        "memory":{
          "shape":"TaskListItemMemoryInteger",
          "documentation":"<p>The task's memory.</p>"
        },
        "name":{
          "shape":"TaskName",
          "documentation":"<p>The task's name.</p>"
        },
        "startTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task started.</p>"
        },
        "status":{
          "shape":"TaskStatus",
          "documentation":"<p>The task's status.</p>"
        },
        "stopTime":{
          "shape":"TaskTimestamp",
          "documentation":"<p>When the task stopped.</p>"
        },
        "taskId":{
          "shape":"TaskId",
          "documentation":"<p>The task's ID.</p>"
        }
      },
      "documentation":"<p>A workflow run task.</p>"
    },
    "TaskListItemCpusInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "TaskListItemMemoryInteger":{
      "type":"integer",
      "box":true,
      "min":1
    },
    "TaskListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "TaskLogStream":{
      "type":"string",
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "TaskName":{
      "type":"string",
      "max":128,
      "min":1
    },
    "TaskStatus":{
      "type":"string",
      "enum":[
        "PENDING",
        "STARTING",
        "RUNNING",
        "STOPPING",
        "COMPLETED",
        "CANCELLED",
        "FAILED"
      ],
      "max":64,
      "min":1
    },
    "TaskStatusMessage":{
      "type":"string",
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "TaskTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "ThrottlingException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The request was denied due to request throttling.</p>",
      "error":{
        "httpStatusCode":429,
        "senderFault":true
      },
      "exception":true,
      "retryable":{"throttling":true}
    },
    "TsvOptions":{
      "type":"structure",
      "members":{
        "readOptions":{
          "shape":"ReadOptions",
          "documentation":"<p>The file's read options.</p>"
        }
      },
      "documentation":"<p>Formatting options for a TSV file.</p>"
    },
    "TsvStoreOptions":{
      "type":"structure",
      "members":{
        "annotationType":{
          "shape":"AnnotationType",
          "documentation":"<p>The store's annotation type.</p>"
        },
        "formatToHeader":{
          "shape":"FormatToHeader",
          "documentation":"<p>The store's header key to column name mapping.</p>"
        },
        "schema":{
          "shape":"TsvStoreOptionsSchemaList",
          "documentation":"<p>The store's schema.</p>"
        }
      },
      "documentation":"<p>File settings for a TSV store.</p>"
    },
    "TsvStoreOptionsSchemaList":{
      "type":"list",
      "member":{"shape":"SchemaItem"},
      "max":5000,
      "min":1
    },
    "UntagResourceRequest":{
      "type":"structure",
      "required":[
        "resourceArn",
        "tagKeys"
      ],
      "members":{
        "resourceArn":{
          "shape":"TagArn",
          "documentation":"<p>The resource's ARN.</p>",
          "location":"uri",
          "locationName":"resourceArn"
        },
        "tagKeys":{
          "shape":"TagKeyList",
          "documentation":"<p>Keys of tags to remove.</p>",
          "location":"querystring",
          "locationName":"tagKeys"
        }
      }
    },
    "UntagResourceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "UpdateAnnotationStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>A name for the store.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "UpdateAnnotationStoreResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "description",
        "id",
        "name",
        "reference",
        "status",
        "updateTime"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "storeFormat":{
          "shape":"StoreFormat",
          "documentation":"<p>The annotation file format of the store.</p>"
        },
        "storeOptions":{
          "shape":"StoreOptions",
          "documentation":"<p>Parsing options for the store.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      }
    },
    "UpdateRunGroupRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "id":{
          "shape":"RunGroupId",
          "documentation":"<p>The group's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "maxCpus":{
          "shape":"UpdateRunGroupRequestMaxCpusInteger",
          "documentation":"<p>The maximum number of CPUs to use.</p>"
        },
        "maxDuration":{
          "shape":"UpdateRunGroupRequestMaxDurationInteger",
          "documentation":"<p>The maximum amount of time to run.</p>"
        },
        "maxRuns":{
          "shape":"UpdateRunGroupRequestMaxRunsInteger",
          "documentation":"<p>The maximum number of concurrent runs for the group.</p>"
        },
        "name":{
          "shape":"RunGroupName",
          "documentation":"<p>A name for the group.</p>"
        }
      }
    },
    "UpdateRunGroupRequestMaxCpusInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateRunGroupRequestMaxDurationInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateRunGroupRequestMaxRunsInteger":{
      "type":"integer",
      "box":true,
      "max":100000,
      "min":1
    },
    "UpdateTime":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "UpdateVariantStoreRequest":{
      "type":"structure",
      "required":["name"],
      "members":{
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>A description for the store.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>A name for the store.</p>",
          "location":"uri",
          "locationName":"name"
        }
      }
    },
    "UpdateVariantStoreResponse":{
      "type":"structure",
      "required":[
        "creationTime",
        "description",
        "id",
        "name",
        "reference",
        "status",
        "updateTime"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      }
    },
    "UpdateWorkflowRequest":{
      "type":"structure",
      "required":["id"],
      "members":{
        "description":{
          "shape":"WorkflowDescription",
          "documentation":"<p>A description for the workflow.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>",
          "location":"uri",
          "locationName":"id"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>A name for the workflow.</p>"
        }
      }
    },
    "ValidationException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"String"}
      },
      "documentation":"<p>The input fails to satisfy the constraints specified by an AWS service.</p>",
      "error":{
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "VariantImportItemDetail":{
      "type":"structure",
      "required":[
        "jobStatus",
        "source"
      ],
      "members":{
        "jobStatus":{
          "shape":"JobStatus",
          "documentation":"<p>The item's job status.</p>"
        },
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>Details about an imported variant item.</p>"
    },
    "VariantImportItemDetails":{
      "type":"list",
      "member":{"shape":"VariantImportItemDetail"},
      "max":1,
      "min":1
    },
    "VariantImportItemSource":{
      "type":"structure",
      "required":["source"],
      "members":{
        "source":{
          "shape":"S3Uri",
          "documentation":"<p>The source file's location in Amazon S3.</p>"
        }
      },
      "documentation":"<p>A imported variant item's source.</p>"
    },
    "VariantImportItemSources":{
      "type":"list",
      "member":{"shape":"VariantImportItemSource"},
      "max":1,
      "min":1
    },
    "VariantImportJobItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "destinationName",
        "id",
        "roleArn",
        "status",
        "updateTime"
      ],
      "members":{
        "completionTime":{
          "shape":"CompletionTime",
          "documentation":"<p>When the job completed.</p>"
        },
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the job was created.</p>"
        },
        "destinationName":{
          "shape":"String",
          "documentation":"<p>The job's destination variant store.</p>"
        },
        "id":{
          "shape":"String",
          "documentation":"<p>The job's ID.</p>"
        },
        "roleArn":{
          "shape":"Arn",
          "documentation":"<p>The job's service role ARN.</p>"
        },
        "runLeftNormalization":{
          "shape":"RunLeftNormalization",
          "documentation":"<p>The job's left normalization setting.</p>"
        },
        "status":{
          "shape":"JobStatus",
          "documentation":"<p>The job's status.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the job was updated.</p>"
        }
      },
      "documentation":"<p>A variant import job.</p>"
    },
    "VariantImportJobItems":{
      "type":"list",
      "member":{"shape":"VariantImportJobItem"}
    },
    "VariantStoreItem":{
      "type":"structure",
      "required":[
        "creationTime",
        "description",
        "id",
        "name",
        "reference",
        "sseConfig",
        "status",
        "statusMessage",
        "storeArn",
        "storeSizeBytes",
        "updateTime"
      ],
      "members":{
        "creationTime":{
          "shape":"CreationTime",
          "documentation":"<p>When the store was created.</p>"
        },
        "description":{
          "shape":"StoreDescription",
          "documentation":"<p>The store's description.</p>"
        },
        "id":{
          "shape":"ResourceId",
          "documentation":"<p>The store's ID.</p>"
        },
        "name":{
          "shape":"String",
          "documentation":"<p>The store's name.</p>"
        },
        "reference":{
          "shape":"ReferenceItem",
          "documentation":"<p>The store's genome reference.</p>"
        },
        "sseConfig":{
          "shape":"SseConfig",
          "documentation":"<p>The store's server-side encryption (SSE) settings.</p>"
        },
        "status":{
          "shape":"StoreStatus",
          "documentation":"<p>The store's status.</p>"
        },
        "statusMessage":{
          "shape":"StatusMessage",
          "documentation":"<p>The store's status message.</p>"
        },
        "storeArn":{
          "shape":"Arn",
          "documentation":"<p>The store's ARN.</p>"
        },
        "storeSizeBytes":{
          "shape":"Long",
          "documentation":"<p>The store's size in bytes.</p>"
        },
        "updateTime":{
          "shape":"UpdateTime",
          "documentation":"<p>When the store was updated.</p>"
        }
      },
      "documentation":"<p>A variant store.</p>"
    },
    "VariantStoreItems":{
      "type":"list",
      "member":{"shape":"VariantStoreItem"}
    },
    "VcfOptions":{
      "type":"structure",
      "members":{
        "ignoreFilterField":{
          "shape":"Boolean",
          "documentation":"<p>The file's ignore filter field setting.</p>"
        },
        "ignoreQualField":{
          "shape":"Boolean",
          "documentation":"<p>The file's ignore qual field setting.</p>"
        }
      },
      "documentation":"<p>Formatting options for a VCF file.</p>"
    },
    "WorkflowArn":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^arn:.+$"
    },
    "WorkflowDefinition":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowDescription":{
      "type":"string",
      "max":256,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowDigest":{
      "type":"string",
      "max":64,
      "min":1
    },
    "WorkflowEngine":{
      "type":"string",
      "enum":[
        "WDL",
        "NEXTFLOW"
      ],
      "max":64,
      "min":1
    },
    "WorkflowExport":{
      "type":"string",
      "enum":["DEFINITION"],
      "max":64,
      "min":1
    },
    "WorkflowExportList":{
      "type":"list",
      "member":{"shape":"WorkflowExport"},
      "max":32,
      "min":0
    },
    "WorkflowId":{
      "type":"string",
      "max":18,
      "min":1,
      "pattern":"^[0-9]+$"
    },
    "WorkflowList":{
      "type":"list",
      "member":{"shape":"WorkflowListItem"}
    },
    "WorkflowListItem":{
      "type":"structure",
      "members":{
        "arn":{
          "shape":"WorkflowArn",
          "documentation":"<p>The workflow's ARN.</p>"
        },
        "creationTime":{
          "shape":"WorkflowTimestamp",
          "documentation":"<p>When the workflow was created.</p>"
        },
        "digest":{
          "shape":"WorkflowDigest",
          "documentation":"<p>The workflow's digest.</p>"
        },
        "id":{
          "shape":"WorkflowId",
          "documentation":"<p>The workflow's ID.</p>"
        },
        "name":{
          "shape":"WorkflowName",
          "documentation":"<p>The workflow's name.</p>"
        },
        "status":{
          "shape":"WorkflowStatus",
          "documentation":"<p>The workflow's status.</p>"
        },
        "type":{
          "shape":"WorkflowType",
          "documentation":"<p>The workflow's type.</p>"
        }
      },
      "documentation":"<p>A workflow.</p>"
    },
    "WorkflowListToken":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowMain":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowParameter":{
      "type":"structure",
      "members":{
        "description":{
          "shape":"WorkflowParameterDescription",
          "documentation":"<p>The parameter's description.</p>"
        },
        "optional":{
          "shape":"Boolean",
          "documentation":"<p>Whether the parameter is optional.</p>"
        }
      },
      "documentation":"<p>A workflow parameter.</p>"
    },
    "WorkflowParameterDescription":{
      "type":"string",
      "max":256,
      "min":0,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowParameterName":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowParameterTemplate":{
      "type":"map",
      "key":{"shape":"WorkflowParameterName"},
      "value":{"shape":"WorkflowParameter"},
      "max":1000,
      "min":1
    },
    "WorkflowRequestId":{
      "type":"string",
      "max":128,
      "min":1,
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "ACTIVE",
        "UPDATING",
        "DELETED",
        "FAILED"
      ],
      "max":64,
      "min":1
    },
    "WorkflowStatusMessage":{
      "type":"string",
      "pattern":"^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$"
    },
    "WorkflowTimestamp":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "WorkflowType":{
      "type":"string",
      "enum":["PRIVATE"],
      "max":64,
      "min":1
    }
  },
  "documentation":"<p>This is the <i>Amazon Omics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is Amazon Omics?</a> in the <i>Amazon Omics Developer Guide</i>.</p>"
}
