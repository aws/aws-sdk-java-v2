{
  "verifiedSimpleMethods": [
    "listBuckets"
  ],
  "renameShapes": {
    "Error": "S3Error",
    "Object": "S3Object"
  },
  "shapeModifiers": {
    "S3Object": {
      "modify": [
        {
          "Size": {
            "emitAsType": "long"
          }
        }
      ]
    },
    "CopyObjectRequest": {
      "inject": [
        {
          "SourceBucket": {
            "shape": "BucketName",
            "documentation": "The name of the bucket containing the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceKey": {
            "shape": "ObjectKey",
            "documentation": "The key of the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceVersionId": {
            "shape": "ObjectVersionId",
            "documentation": "Specifies a particular version of the source object to copy. By default the latest version is copied. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          }
        }
      ],
      "modify": [
        {
          "CopySource": {
            "deprecated": true,
            "deprecatedMessage": "The {@code copySource} parameter has been deprecated in favor of the more user-friendly {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters. The {@code copySource} parameter will remain fully functional, but it must not be used in conjunction with its replacement parameters."
          },
          "Bucket": {
            "emitPropertyName": "DestinationBucket",
            "existingNameDeprecated": true
          },
          "Key": {
            "emitPropertyName": "DestinationKey",
            "existingNameDeprecated": true
          }
        }
      ]
    },
    "UploadPartCopyRequest": {
      "inject": [
        {
          "SourceBucket": {
            "shape": "BucketName",
            "documentation": "The name of the bucket containing the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceKey": {
            "shape": "ObjectKey",
            "documentation": "The key of the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceVersionId": {
            "shape": "ObjectVersionId",
            "documentation": "Specifies a particular version of the source object to copy. By default the latest version is copied. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          }
        }
      ],
      "modify": [
        {
          "CopySource": {
            "deprecated": true,
            "deprecatedMessage": "The {@code copySource} parameter has been deprecated in favor of the more user-friendly {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters. The {@code copySource} parameter will remain fully functional, but it must not be used in conjunction with its replacement parameters."
          },
          "Bucket": {
            "emitPropertyName": "DestinationBucket",
            "existingNameDeprecated": true
          },
          "Key": {
            "emitPropertyName": "DestinationKey",
            "existingNameDeprecated": true
          }
        }
      ]
    },
    "ObjectVersion": {
      "modify": [
        {
          "Size": {
            "emitAsType": "long"
          }
        }
      ]
    },
    "Part": {
      "modify": [
        {
          "Size": {
            "emitAsType": "long"
          }
        }
      ]
    },
    "FilterRuleName": {
      "modify": [
        {
          "prefix": { "emitEnumValue": "Prefix" }
        },
        {
          "suffix": { "emitEnumValue": "Suffix" }
        }
      ]
    }
  },
  "serviceSpecificClientConfigClass": "S3Configuration",
  "attachPayloadTraitToMember": {
    "GetBucketLocationOutput": "LocationConstraint"
  },
  "convenienceTypeOverloads": [
    {
      "shapeName": "PutObjectRequest",
      "memberName": "Tagging",
      "convenienceType": "software.amazon.awssdk.services.s3.model.Tagging",
      "typeAdapterFqcn": "software.amazon.awssdk.services.s3.internal.TaggingAdapter"
    },
    {
      "shapeName": "CopyObjectRequest",
      "memberName": "Tagging",
      "convenienceType": "software.amazon.awssdk.services.s3.model.Tagging",
      "typeAdapterFqcn": "software.amazon.awssdk.services.s3.internal.TaggingAdapter"
    },
    {
      "shapeName": "CreateMultipartUploadRequest",
      "memberName": "Tagging",
      "convenienceType": "software.amazon.awssdk.services.s3.model.Tagging",
      "typeAdapterFqcn": "software.amazon.awssdk.services.s3.internal.TaggingAdapter"
    }
  ],
  "customResponseMetadata": {
    "EXTENDED_REQUEST_ID": "x-amz-id-2",
    "CLOUD_FRONT_ID": "X-Amz-Cf-Id",
    "REQUEST_ID": "x-amz-request-id"
  },
  "customProtocolFactoryFqcn": "software.amazon.awssdk.protocols.xml.AwsS3ProtocolFactory",
  "operationModifiers": {
    "SelectObjectContent": {
      "exclude": true
    }
  },
  "deprecatedOperations": [
    "GetBucketLifecycle",
    "GetBucketNotification",
    "PutBucketLifecycle",
    "PutBucketNotification"
  ],
  "utilitiesMethod": {
    "returnType": "software.amazon.awssdk.services.s3.S3Utilities",
    "createMethodParams": [
      "clientConfiguration"
    ]
  }
}
