{
  "verifiedSimpleMethods": [
    "listBuckets"
  ],
  "renameShapes": {
    "Error": "S3Error",
    "Object": "S3Object"
  },
  "shapeModifiers": {
    "S3Object": {
      "modify": [
        {
          "Size": {
            "emitAsType": "long"
          }
        }
      ]
    },
    "CopyObjectRequest": {
      "inject": [
        {
          "SourceBucket": {
            "shape": "BucketName",
            "documentation": "The name of the bucket containing the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceKey": {
            "shape": "ObjectKey",
            "documentation": "The key of the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceVersionId": {
            "shape": "ObjectVersionId",
            "documentation": "Specifies a particular version of the source object to copy. By default the latest version is copied. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          }
        }
      ],
      "modify": [
        {
          "CopySource": {
            "deprecated": true,
            "deprecatedMessage": "The {@code copySource} parameter has been deprecated in favor of the more user-friendly {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters. The {@code copySource} parameter will remain fully functional, but it must not be used in conjunction with its replacement parameters."
          },
          "Bucket": {
            "emitPropertyName": "DestinationBucket",
            "existingNameDeprecated": true
          },
          "Key": {
            "emitPropertyName": "DestinationKey",
            "existingNameDeprecated": true
          }
        }
      ]
    },
    "UploadPartCopyRequest": {
      "inject": [
        {
          "SourceBucket": {
            "shape": "BucketName",
            "documentation": "The name of the bucket containing the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceKey": {
            "shape": "ObjectKey",
            "documentation": "The key of the object to copy. The provided input will be URL encoded. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          },
          "SourceVersionId": {
            "shape": "ObjectVersionId",
            "documentation": "Specifies a particular version of the source object to copy. By default the latest version is copied. The {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters must not be used in conjunction with the {@code copySource} parameter."
          }
        }
      ],
      "modify": [
        {
          "CopySource": {
            "deprecated": true,
            "deprecatedMessage": "The {@code copySource} parameter has been deprecated in favor of the more user-friendly {@code sourceBucket}, {@code sourceKey}, and {@code sourceVersionId} parameters. The {@code copySource} parameter will remain fully functional, but it must not be used in conjunction with its replacement parameters."
          },
          "Bucket": {
            "emitPropertyName": "DestinationBucket",
            "existingNameDeprecated": true
          },
          "Key": {
            "emitPropertyName": "DestinationKey",
            "existingNameDeprecated": true
          }
        }
      ]
    },
    "ObjectVersion": {
      "modify": [
        {
          "Size": {
            "emitAsType": "long"
          }
        }
      ]
    },
    "Part": {
      "modify": [
        {
          "Size": {
            "emitAsType": "long"
          }
        }
      ]
    },
    "FilterRuleName": {
      "modify": [
        {
          "prefix": { "emitEnumValue": "Prefix" }
        },
        {
          "suffix": { "emitEnumValue": "Suffix" }
        }
      ]
    },
    "ReplicationRuleFilter": {
      "union": true
    },
    "MetricsFilter": {
      "union": true
    },
    "AnalyticsFilter": {
      "union": true
    },
    "LifecycleRuleFilter": {
      "union": true
    }
  },
  "serviceConfig": {
    "className": "S3Configuration",
    "hasDualstackProperty": true,
    "hasUseArnRegionProperty": true,
    "hasMultiRegionEnabledProperty": true,
    "hasPathStyleAccessEnabledProperty":true,
    "hasAccelerateModeEnabledProperty":true
  },
  "skipEndpointTests": {
      "region is not a valid DNS-suffix": "Validation for region happens in client builder",
      "Invalid access point ARN: Not S3": "Test assumes UseArnRegion is true but SDK defaults to false",
      "Invalid access point ARN: AccountId is invalid": "Test assumes UseArnRegion is true but SDK defaults to false",
      "Invalid access point ARN: access point name is invalid": "Test assumes UseArnRegion is true but SDK defaults to false",
      "Access points (disable access points explicitly false)": "Test assumes UseArnRegion is true but SDK defaults to false",
      "Bucket region is invalid": "Test assumes UseArnRegion is true but SDK defaults to false",
      "Access points when Access points explicitly disabled (used for CreateBucket)": "Explicitly disabling access points not support on client",
      "Access point ARN with FIPS & Dualstack": "Test assumes UseArnRegion is true but SDK defaults to false",
      "Access point ARN with Dualstack": "Test assumes UseArnRegion is true but SDK defaults to false",
      "scheme is respected (virtual addressing)": "Test is broken for client test, needs operationInputs for Bucket",
      "scheme is respected": "Test is broken for client test, needs operationInputs for Bucket",
      "invalid Endpoint override": "Test is broken for client test, needs operationInputs for Bucket",
      "vanilla access point arn with region mismatch and UseArnRegion unset": "SDK config default to UseArnRegion = false",
      "no region set": "SDK client builder requires a region",
      "ForcePathStyle, aws-global region with fips is invalid": "Test is broken for client tests, need operationInputs for Bucket param",
      "accelerate (dualstack=false)@cn-north-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "path style + accelerate = error@us-west-2": "Validation for this happens during client build time",
      "path style + accelerate = error@cn-north-1": "Validation for this happens during client build time",
      "path style + accelerate = error@af-south-1": "Validation for this happens during client build time",
      "SDK::HOST + accelerate@cn-north-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "outposts arn with region mismatch and UseArnRegion unset": "SDK default to UseArnRegion=false",
      "S3 outposts does not support dualstack": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 outposts does not support fips": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 outposts does not support accelerate": "Test is broken for client tests, need operationInputs for Bucket param",
      "validates against subresource": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda @us-east-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda @us-gov-east-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda @us-gov-east-1, with fips": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - invalid resource": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - missing region": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - missing account-id": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - missing access point name": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - access point name contains invalid character: *": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - access point name contains invalid character: .": "Test is broken for client tests, need operationInputs for Bucket param",
      "object lambda with invalid arn - access point name contains sub resources": "Test is broken for client tests, need operationInputs for Bucket param",
      "WriteGetObjectResponse with accelerate": "Test is broken for client tests, need operationInputs to make SDK use WriteGetObjectResponse",
      "WriteGetObjectResponse with invalid partition": "SDK validates region earlier in the chain",
      "WriteGetObjectResponse with an unknown partition": "Test is broken for client tests, need operationInputs to make SDK use WriteGetObjectResponse",
      "S3 Outposts Abba Real Outpost Prod us-west-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Real Outpost Prod ap-east-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Ec2 Outpost Prod us-east-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Ec2 Outpost Prod me-south-1": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Real Outpost Beta": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Ec2 Outpost Beta": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba - No endpoint set for beta": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Invalid hardware type": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Abba Special character in Outpost Arn": "Test is broken for client tests, need operationInputs for Bucket param",
      "S3 Outposts Snow with bucket": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow without bucket": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow no port": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow dns endpoint": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow invalid url": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow FIPS enabled": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow Dual-stack enabled": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "S3 Outposts Snow Accelerate enabled": "Test is broken for client tests, need operationInputs for Bucket and SnowEndpointUrl param",
      "Endpoint override, accesspoint with http, path, query, and port": "Test is broken for client tests, need operationInputs for Bucket param"
  },
  "attachPayloadTraitToMember": {
    "GetBucketLocationOutput": "LocationConstraint"
  },
  "convenienceTypeOverloads": [
    {
      "shapeName": "PutObjectRequest",
      "memberName": "Tagging",
      "convenienceType": "software.amazon.awssdk.services.s3.model.Tagging",
      "typeAdapterFqcn": "software.amazon.awssdk.services.s3.internal.TaggingAdapter"
    },
    {
      "shapeName": "CopyObjectRequest",
      "memberName": "Tagging",
      "convenienceType": "software.amazon.awssdk.services.s3.model.Tagging",
      "typeAdapterFqcn": "software.amazon.awssdk.services.s3.internal.TaggingAdapter"
    },
    {
      "shapeName": "CreateMultipartUploadRequest",
      "memberName": "Tagging",
      "convenienceType": "software.amazon.awssdk.services.s3.model.Tagging",
      "typeAdapterFqcn": "software.amazon.awssdk.services.s3.internal.TaggingAdapter"
    }
  ],
  "customResponseMetadata": {
    "EXTENDED_REQUEST_ID": "x-amz-id-2",
    "CLOUD_FRONT_ID": "X-Amz-Cf-Id",
    "REQUEST_ID": "x-amz-request-id"
  },
  "customProtocolFactoryFqcn": "software.amazon.awssdk.protocols.xml.AwsS3ProtocolFactory",
  "operationModifiers": {
  },
  "deprecatedOperations": [
    "GetBucketLifecycle",
    "GetBucketNotification",
    "PutBucketLifecycle",
    "PutBucketNotification"
  ],
  "utilitiesMethod": {
    "returnType": "software.amazon.awssdk.services.s3.S3Utilities",
    "createMethodParams": [
      "clientConfiguration"
    ]
  },
  "additionalBuilderMethods": [
      {
        "methodName": "crtBuilder",
        "clientType": "async",
        "instanceType": "software.amazon.awssdk.services.s3.internal.crt.S3CrtAsyncClient",
        "returnType": "software.amazon.awssdk.services.s3.S3CrtAsyncClientBuilder",
        "statement": "builder()",
        "javaDoc": "Create a builder that can be used to configure a CRT-based {@link S3AsyncClient}"
      },
      {
        "methodName": "crtCreate",
        "clientType": "async",
        "instanceType": "software.amazon.awssdk.services.s3.internal.crt.S3CrtAsyncClient",
        "returnType": "software.amazon.awssdk.services.s3.S3AsyncClient",
        "statement": "builder().build()",
        "javaDoc": "Create a CRT-based {@link S3AsyncClient} with default settings"
      }
  ],
  "delegateAsyncClientClass": true,
  "delegateSyncClientClass": true,
  "useGlobalEndpoint": true,
  "interceptors": [
    "software.amazon.awssdk.services.s3.internal.handlers.PutObjectInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.CreateBucketInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.CreateMultipartUploadRequestInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.EnableChunkedEncodingInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.ConfigureSignerInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.DecodeUrlEncodedResponseInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.GetBucketPolicyInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.AsyncChecksumValidationInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.SyncChecksumValidationInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.EnableTrailingChecksumInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.ExceptionTranslationInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.GetObjectInterceptor",
    "software.amazon.awssdk.services.s3.internal.handlers.CopySourceInterceptor"
  ],
  "requiredTraitValidationEnabled": true
}
