/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.transfer.s3;

import java.util.Objects;
import java.util.Optional;
import java.util.function.Consumer;
import software.amazon.awssdk.annotations.SdkPreviewApi;
import software.amazon.awssdk.annotations.SdkPublicApi;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.utils.ToString;
import software.amazon.awssdk.utils.builder.CopyableBuilder;
import software.amazon.awssdk.utils.builder.ToCopyableBuilder;

/**
 * Configuration options for {@link S3TransferManager#downloadDirectory(DownloadDirectoryRequest)}. All values are optional, and
 * not specifying them will use the SDK default values.
 *
 * <p>Use {@link #builder()} to create a set of options.
 *
 * @see S3TransferManager#downloadDirectory(DownloadDirectoryRequest)
 */
@SdkPublicApi
@SdkPreviewApi
public final class DownloadDirectoryOverrideConfiguration implements ToCopyableBuilder<
    DownloadDirectoryOverrideConfiguration.Builder, DownloadDirectoryOverrideConfiguration> {

    private final Consumer<DownloadFileRequest.Builder> downloadFileRequestTransformer;

    private DownloadDirectoryOverrideConfiguration(DefaultBuilder builder) {
        this.downloadFileRequestTransformer = builder.downloadFileRequestTransformer;
    }

    /**
     * @return the optional download request transformer
     * @see DownloadDirectoryOverrideConfiguration.Builder#downloadFileRequestTransformer(Consumer)
     */
    public Optional<Consumer<DownloadFileRequest.Builder>> downloadFileRequestTransformer() {
        return Optional.ofNullable(downloadFileRequestTransformer);
    }

    @Override
    public Builder toBuilder() {
        return new DefaultBuilder(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        DownloadDirectoryOverrideConfiguration that = (DownloadDirectoryOverrideConfiguration) o;

        return Objects.equals(downloadFileRequestTransformer, that.downloadFileRequestTransformer);
    }

    @Override
    public int hashCode() {
        int result = downloadFileRequestTransformer != null ? downloadFileRequestTransformer.hashCode() : 0;
        return result;
    }

    @Override
    public String toString() {
        return ToString.builder("DownloadDirectoryConfiguration")
                       .add("downloadFileRequestTransformer", downloadFileRequestTransformer)
                       .build();
    }

    public static Builder builder() {
        return new DefaultBuilder();
    }

    public static Class<? extends Builder> serializableBuilderClass() {
        return DefaultBuilder.class;
    }

    public interface Builder extends CopyableBuilder<Builder, DownloadDirectoryOverrideConfiguration> {

        /**
         * Specify a function used to transform the {@link DownloadFileRequest}s generated by this {@link
         * DownloadDirectoryRequest}. The provided function is called once for each object that is downloaded, allowing you to
         * modify the paths resolved by TransferManager on a per-file basis, modify the created {@link GetObjectRequest} before it
         * is passed to S3, or configure a {@link TransferRequestOverrideConfiguration}.
         *
         * <p>The factory receives the {@link DownloadFileRequest}s created by Transfer Manager for each object in the bucket
         * being downloaded, and returns a (potentially modified) {@code DownloadFileRequest}.
         *
         * <p>
         * <b>Usage Example:</b>
         * <pre>
         * {@code
         * // Add a LoggingTransferListener to every transfer within the download directory request
         * TransferRequestOverrideConfiguration fileDownloadConfiguration =
         *     TransferRequestOverrideConfiguration.builder()
         *         .addListener(LoggingTransferListener.create())
         *         .build();
         *
         * DownloadDirectoryOverrideConfiguration directoryDownloadConfiguration =
         *     DownloadDirectoryOverrideConfiguration.builder()
         *         .downloadFileRequestTransformer(request -> request.overrideConfiguration(fileDownloadConfiguration))
         *         .build();
         *
         * DownloadDirectoryRequest request =
         *     DownloadDirectoryRequest.builder()
         *         .sourceDirectory(Paths.get("."))
         *         .bucket("bucket")
         *         .prefix("prefix")
         *         .overrideConfiguration(directoryDownloadConfiguration)
         *         .build()
         *
         * DownloadDirectoryTransfer downloadDirectory = transferManager.downloadDirectory(request);
         *
         * // Wait for the transfer to complete
         * CompletedDownloadDirectory completedDownloadDirectory = downloadDirectory.completionFuture().join();
         *
         * // Print out the failed downloads
         * completedDownloadDirectory.failedDownloads().forEach(System.out::println);
         * }
         * </pre>
         *
         * @param downloadFileRequestTransformer A transformer to use for modifying the file-level download requests before
         *                                       execution
         * @return This builder for method chaining
         */
        Builder downloadFileRequestTransformer(Consumer<DownloadFileRequest.Builder> downloadFileRequestTransformer);

        @Override
        DownloadDirectoryOverrideConfiguration build();
    }

    private static final class DefaultBuilder implements Builder {
        private Consumer<DownloadFileRequest.Builder> downloadFileRequestTransformer;

        private DefaultBuilder(DownloadDirectoryOverrideConfiguration configuration) {
            this.downloadFileRequestTransformer = configuration.downloadFileRequestTransformer;
        }

        private DefaultBuilder() {
        }

        @Override
        public Builder downloadFileRequestTransformer(Consumer<DownloadFileRequest.Builder> downloadFileRequestTransformer) {
            this.downloadFileRequestTransformer = downloadFileRequestTransformer;
            return this;
        }

        public Consumer<DownloadFileRequest.Builder> getDownloadFileRequestTransformer() {
            return downloadFileRequestTransformer;
        }

        public void setDownloadFileRequestTransformer(Consumer<DownloadFileRequest.Builder> downloadFileRequestTransformer) {
            this.downloadFileRequestTransformer = downloadFileRequestTransformer;
        }

        @Override
        public DownloadDirectoryOverrideConfiguration build() {
            return new DownloadDirectoryOverrideConfiguration(this);
        }

    }
}
