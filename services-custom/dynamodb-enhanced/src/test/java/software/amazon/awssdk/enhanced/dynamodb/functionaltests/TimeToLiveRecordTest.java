/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, AutoTimestamp 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.enhanced.dynamodb.functionaltests;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.temporal.ChronoUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.assertj.core.api.AssertionsForClassTypes;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.TimeToLiveExtension;
import software.amazon.awssdk.enhanced.dynamodb.functionaltests.models.RecordWithTTL;
import software.amazon.awssdk.enhanced.dynamodb.internal.client.ExtensionResolver;
import software.amazon.awssdk.enhanced.dynamodb.model.DescribeTimeToLiveEnhancedResponse;
import software.amazon.awssdk.services.dynamodb.model.TimeToLiveStatus;

public class TimeToLiveRecordTest extends LocalDynamoDbSyncTestBase {

    private static final TableSchema<RecordWithTTL> TABLE_SCHEMA = TableSchema.fromClass(RecordWithTTL.class);

    private final TimeToLiveExtension timeToLiveExtension = TimeToLiveExtension.create();

    private final DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()
                                                                                .dynamoDbClient(getDynamoDbClient()).extensions(
            Stream.concat(ExtensionResolver.defaultExtensions().stream(),
                          Stream.of(AutoGeneratedTimestampRecordExtension.create(), timeToLiveExtension)).collect(Collectors.toList()))
                                                                                .build();

    private final DynamoDbTable<RecordWithTTL> mappedTable =
        enhancedClient.table(getConcreteTableName("table-name"), TABLE_SCHEMA);

    @Before
    public void createTable() {
        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
    }

    @After
    public void deleteTable() {
        getDynamoDbClient().deleteTable(r -> r.tableName(getConcreteTableName("table-name")));
    }

    @Test
    public void updateTimeToLive_multipleUpdates() {
        RecordWithTTL record = new RecordWithTTL();
        record.setId("id123");
        record.setAttribute("attribute");
        mappedTable.putItem(record);

        RecordWithTTL persistedRecord = mappedTable.getItem(record);

        assertThat(persistedRecord.getUpdatedDate()).isNotNull();
        assertThat(persistedRecord.getExpirationDate()).isEqualTo(persistedRecord.getUpdatedDate().plus(30, ChronoUnit.DAYS).getEpochSecond());

        DescribeTimeToLiveEnhancedResponse ttlResponseBeforeUpdate = mappedTable.describeTimeToLive();
        AssertionsForClassTypes.assertThat(ttlResponseBeforeUpdate.timeToLiveDescription().timeToLiveStatus()).isEqualTo(TimeToLiveStatus.DISABLED);
        AssertionsForClassTypes.assertThat(ttlResponseBeforeUpdate.timeToLiveDescription().attributeName()).isNull();

        mappedTable.updateTimeToLive(true);

        DescribeTimeToLiveEnhancedResponse ttlResponseAfterEnable = mappedTable.describeTimeToLive();
        AssertionsForClassTypes.assertThat(ttlResponseAfterEnable.timeToLiveDescription().timeToLiveStatus()).isEqualTo(TimeToLiveStatus.ENABLED);
        AssertionsForClassTypes.assertThat(ttlResponseAfterEnable.timeToLiveDescription().attributeName()).isEqualTo(
            "expirationDate");

        mappedTable.updateTimeToLive(false);

        DescribeTimeToLiveEnhancedResponse ttlResponseAfterDisable = mappedTable.describeTimeToLive();

        AssertionsForClassTypes.assertThat(ttlResponseAfterDisable.timeToLiveDescription().timeToLiveStatus()).isEqualTo(TimeToLiveStatus.DISABLED);
        AssertionsForClassTypes.assertThat(ttlResponseAfterDisable.timeToLiveDescription().attributeName()).isNull();
    }
}
