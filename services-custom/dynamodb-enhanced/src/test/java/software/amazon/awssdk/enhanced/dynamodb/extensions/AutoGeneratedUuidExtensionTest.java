/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.enhanced.dynamodb.extensions;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.params.provider.EnumSource.Mode.INCLUDE;
import static software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedUuidExtension.AttributeTags.autoGeneratedUuidAttribute;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.primaryPartitionKey;

import com.fasterxml.uuid.Generators;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import software.amazon.awssdk.enhanced.dynamodb.OperationContext;
import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;
import software.amazon.awssdk.enhanced.dynamodb.internal.extensions.DefaultDynamoDbExtensionContext;
import software.amazon.awssdk.enhanced.dynamodb.internal.operations.DefaultOperationContext;
import software.amazon.awssdk.enhanced.dynamodb.internal.operations.OperationName;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableSchema;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

class AutoGeneratedUuidExtensionTest {

    private static final Pattern UUID_PATTERN = Pattern.compile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");
    private static final String RECORD_ID = "id-123";
    private static final OperationContext PRIMARY_CONTEXT = DefaultOperationContext.create("table-name", TableMetadata.primaryIndexName());

    private static final StaticTableSchema<ItemWithUuid> ITEM_WITH_UUID_MAPPER = StaticTableSchema
        .builder(ItemWithUuid.class)
        .newItemSupplier(ItemWithUuid::new)
        .addAttribute(String.class, a -> a.name("id")
                                          .getter(ItemWithUuid::getId)
                                          .setter(ItemWithUuid::setId)
                                          .addTag(primaryPartitionKey()))
        .addAttribute(String.class, a -> a.name("uuidAttribute")
                                          .getter(ItemWithUuid::getUuidAttribute)
                                          .setter(ItemWithUuid::setUuidAttribute)
                                          .addTag(autoGeneratedUuidAttribute())
        )
        .addAttribute(String.class, a -> a.name("simpleString")
                                          .getter(ItemWithUuid::getSimpleString)
                                          .setter(ItemWithUuid::setSimpleString))
        .build();


    @Nested
    class WithDefaultUuidSupplier {

        private final AutoGeneratedUuidExtension extension = AutoGeneratedUuidExtension.create();

        private void assertUUIDv4(String uuid) {
            assertEquals(4, UUID.fromString(uuid).version());
        }

        @EnumSource(value = OperationName.class, names = {"PUT_ITEM", "UPDATE_ITEM"}, mode = INCLUDE)
        @ParameterizedTest
        void beforeWrite_setNewUUID_whenHasNoUuidInItem(OperationName operation) {
            ItemWithUuid item = new ItemWithUuid();
            item.setId(RECORD_ID);
            item.setUuidAttribute(UUID.randomUUID().toString());

            Map<String, AttributeValue> items = ITEM_WITH_UUID_MAPPER.itemToMap(item, true);
            assertThat(items).hasSize(2);

            WriteModification result = extension.beforeWrite(DefaultDynamoDbExtensionContext
                                                                 .builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_UUID_MAPPER.tableMetadata())
                                                                 .operationName(operation)
                                                                 .operationContext(PRIMARY_CONTEXT).build());

            assertThat(result.transformedItem())
                .hasSize(2)
                .containsEntry("id", AttributeValue.fromS(RECORD_ID))
                .extractingByKey("uuidAttribute")
                .satisfies(uuid -> assertThat(uuid.s())
                    .matches(UUID_PATTERN)
                    .isNotEqualTo(item.getUuidAttribute())
                    .satisfies(this::assertUUIDv4));

            assertThat(result.additionalConditionalExpression())
                .isNull();
            assertThat(result.updateExpression())
                .isNull();
        }

        @EnumSource(value = OperationName.class, names = {"PUT_ITEM", "UPDATE_ITEM"}, mode = INCLUDE)
        @ParameterizedTest
        void beforeWrite_setNewUUID_whenHasUuidInItem(OperationName operation) {
            ItemWithUuid item = new ItemWithUuid();
            item.setId(RECORD_ID);
            item.setUuidAttribute(null);

            Map<String, AttributeValue> items = ITEM_WITH_UUID_MAPPER.itemToMap(item, true);
            assertThat(items).hasSize(1);

            WriteModification result = extension.beforeWrite(DefaultDynamoDbExtensionContext
                                                                 .builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_UUID_MAPPER.tableMetadata())
                                                                 .operationName(operation)
                                                                 .operationContext(PRIMARY_CONTEXT).build());

            assertThat(result.transformedItem())
                .hasSize(2)
                .containsEntry("id", AttributeValue.fromS(RECORD_ID))
                .extractingByKey("uuidAttribute")
                .satisfies(uuid -> assertThat(uuid.s())
                    .matches(UUID_PATTERN)
                    .isNotEqualTo(item.getUuidAttribute())
                    .satisfies(this::assertUUIDv4));

            assertThat(result.additionalConditionalExpression())
                .isNull();
            assertThat(result.updateExpression())
                .isNull();
        }
    }

    @Nested
    class WithCustomUuidSupplier {

        private void assertUUIDv7(String uuid) {
            assertEquals(7, UUID.fromString(uuid).version());
        }

        private final AutoGeneratedUuidExtension extension = AutoGeneratedUuidExtension
            .builder()
            .uuidSupplier(() -> Generators.timeBasedEpochGenerator().generate())
            .build();

        @EnumSource(value = OperationName.class, names = {"PUT_ITEM", "UPDATE_ITEM"}, mode = INCLUDE)
        @ParameterizedTest
        void beforeWrite_setNewUUID_whenHasNoUuidInItem(OperationName operation) {
            ItemWithUuid item = new ItemWithUuid();
            item.setId(RECORD_ID);
            item.setUuidAttribute(UUID.randomUUID().toString());

            Map<String, AttributeValue> items = ITEM_WITH_UUID_MAPPER.itemToMap(item, true);
            assertThat(items).hasSize(2);

            WriteModification result = extension.beforeWrite(DefaultDynamoDbExtensionContext
                                                                 .builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_UUID_MAPPER.tableMetadata())
                                                                 .operationName(operation)
                                                                 .operationContext(PRIMARY_CONTEXT).build());

            assertThat(result.transformedItem())
                .hasSize(2)
                .containsEntry("id", AttributeValue.fromS(RECORD_ID))
                .extractingByKey("uuidAttribute")
                .satisfies(value -> assertThat(value.s())
                    .matches(UUID_PATTERN)
                    .isNotEqualTo(item.getUuidAttribute())
                    .satisfies(this::assertUUIDv7));

            assertThat(result.additionalConditionalExpression())
                .isNull();
            assertThat(result.updateExpression())
                .isNull();
        }

        @EnumSource(value = OperationName.class, names = {"PUT_ITEM", "UPDATE_ITEM"}, mode = INCLUDE)
        @ParameterizedTest
        void beforeWrite_setNewUUID_whenHasUuidInItem(OperationName operation) {
            ItemWithUuid item = new ItemWithUuid();
            item.setId(RECORD_ID);
            item.setUuidAttribute(null);

            Map<String, AttributeValue> items = ITEM_WITH_UUID_MAPPER.itemToMap(item, true);
            assertThat(items).hasSize(1);

            WriteModification result = extension.beforeWrite(DefaultDynamoDbExtensionContext
                                                                 .builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_UUID_MAPPER.tableMetadata())
                                                                 .operationName(operation)
                                                                 .operationContext(PRIMARY_CONTEXT).build());

            assertThat(result.transformedItem())
                .hasSize(2)
                .containsEntry("id", AttributeValue.fromS(RECORD_ID))
                .extractingByKey("uuidAttribute")
                .satisfies(uuid -> assertThat(uuid.s())
                    .matches(UUID_PATTERN)
                    .isNotEqualTo(item.getUuidAttribute())
                    .satisfies(this::assertUUIDv7));

            assertThat(result.additionalConditionalExpression())
                .isNull();
            assertThat(result.updateExpression())
                .isNull();
        }
    }

    @Test
    void throws_IllegalArgumentException_for_AutogeneratedUuid_withNonStringType() {
        StaticTableSchema.Builder<ItemWithUuid> staticTableBuilder = StaticTableSchema
            .builder(ItemWithUuid.class)
            .newItemSupplier(ItemWithUuid::new)
            .addAttribute(Integer.class, a -> a.name("intAttribute")
                                               .getter(ItemWithUuid::getIntAttribute)
                                               .setter(ItemWithUuid::setIntAttribute)
                                               .addTag(autoGeneratedUuidAttribute())
            );
        assertThatThrownBy(staticTableBuilder::build)
            .isExactlyInstanceOf(IllegalArgumentException.class)
            .hasMessage("Attribute 'intAttribute' of Class type class java.lang.Integer is not a suitable Java Class type"
                        + " to be used as a Auto Generated Uuid attribute. Only String Class type is supported.");
    }

    private static class ItemWithUuid {

        private String id;
        private String uuidAttribute;
        private String simpleString;
        private Integer intAttribute;

        public Integer getIntAttribute() {
            return intAttribute;
        }

        public void setIntAttribute(Integer intAttribute) {
            this.intAttribute = intAttribute;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getUuidAttribute() {
            return uuidAttribute;
        }

        public void setUuidAttribute(String uuidAttribute) {
            this.uuidAttribute = uuidAttribute;
        }

        public String getSimpleString() {
            return simpleString;
        }

        public void setSimpleString(String simpleString) {
            this.simpleString = simpleString;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            ItemWithUuid that = (ItemWithUuid) o;
            return Objects.equals(id, that.id) && Objects.equals(uuidAttribute, that.uuidAttribute) && Objects.equals(simpleString, that.simpleString);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, uuidAttribute, simpleString);
        }

    }

}
