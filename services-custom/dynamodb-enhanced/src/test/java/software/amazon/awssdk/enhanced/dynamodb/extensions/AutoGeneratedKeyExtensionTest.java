/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 */

package software.amazon.awssdk.enhanced.dynamodb.extensions;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static software.amazon.awssdk.enhanced.dynamodb.UuidTestUtils.isValidUuid;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.primaryPartitionKey;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.secondaryPartitionKey;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.secondarySortKey;

import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import software.amazon.awssdk.enhanced.dynamodb.OperationContext;
import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;
import software.amazon.awssdk.enhanced.dynamodb.internal.extensions.DefaultDynamoDbExtensionContext;
import software.amazon.awssdk.enhanced.dynamodb.internal.operations.DefaultOperationContext;
import software.amazon.awssdk.enhanced.dynamodb.internal.operations.OperationName;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableSchema;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;

public class AutoGeneratedKeyExtensionTest {

    private static final String RECORD_ID = "id123";
    private static final String TABLE_NAME = "table-name";

    private static final OperationContext PRIMARY_CONTEXT =
        DefaultOperationContext.create(TABLE_NAME, TableMetadata.primaryIndexName());

    private final AutoGeneratedKeyExtension extension = AutoGeneratedKeyExtension.builder().build();

    /**
     * Schema that places @DynamoDbAutoGeneratedKey on GSI key ("keyAttribute") so the validation passes.
     */
    private static final StaticTableSchema<ItemWithKey> ITEM_WITH_KEY_SCHEMA =
        StaticTableSchema.builder(ItemWithKey.class)
                         .newItemSupplier(ItemWithKey::new)
                         .addAttribute(String.class, a -> a.name("id")
                                                           .getter(ItemWithKey::getId)
                                                           .setter(ItemWithKey::setId)
                                                           .addTag(primaryPartitionKey()) // PK
                                                           .addTag(AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                         .addAttribute(String.class, a -> a.name("keyAttribute")
                                                           .getter(ItemWithKey::getKeyAttribute)
                                                           .setter(ItemWithKey::setKeyAttribute)
                                                           .tags(secondaryPartitionKey("gsi_keys_only"), // GSI
                                                                 AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                         .addAttribute(String.class, a -> a.name("simpleString")
                                                           .getter(ItemWithKey::getSimpleString)
                                                           .setter(ItemWithKey::setSimpleString))
                         .build();

    /**
     * Schema that places @DynamoDbAutoGeneratedKey on a NON-KEY attribute to trigger the exception.
     */
    private static final StaticTableSchema<ItemWithKey> INVALID_NONKEY_AUTOGEN_SCHEMA =
        StaticTableSchema.builder(ItemWithKey.class)
                         .newItemSupplier(ItemWithKey::new)
                         .addAttribute(String.class, a -> a.name("id")
                                                           .getter(ItemWithKey::getId)
                                                           .setter(ItemWithKey::setId)
                                                           .addTag(primaryPartitionKey()))
                         .addAttribute(String.class, a -> a.name("keyAttribute")
                                                           .getter(ItemWithKey::getKeyAttribute)
                                                           .setter(ItemWithKey::setKeyAttribute)
                                                           // No index tags here â€” autogen on non-key fails at beforeWrite()
                                                           .addTag(AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                         .addAttribute(String.class, a -> a.name("simpleString")
                                                           .getter(ItemWithKey::getSimpleString)
                                                           .setter(ItemWithKey::setSimpleString))
                         .build();

    /**
     * Schema that places @DynamoDbAutoGeneratedKey on LSI key ("simpleString") so the validation passes.
     */
    private static final StaticTableSchema<ItemWithKey> LSI_SK_AUTOGEN_SCHEMA =
        StaticTableSchema.builder(ItemWithKey.class)
                         .newItemSupplier(ItemWithKey::new)
                         .addAttribute(String.class, a -> a.name("id")
                                                           .getter(ItemWithKey::getId)
                                                           .setter(ItemWithKey::setId)
                                                           .addTag(primaryPartitionKey()))
                         .addAttribute(String.class, a -> a.name("keyAttribute")
                                                           .getter(ItemWithKey::getKeyAttribute)
                                                           .setter(ItemWithKey::setKeyAttribute))
                         .addAttribute(String.class, a -> a.name("simpleString")
                                                           .getter(ItemWithKey::getSimpleString)
                                                           .setter(ItemWithKey::setSimpleString)
                                                           .tags(secondarySortKey("lsi1"), // LSI
                                                                 AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                         .build();

    @Test
    public void updateItem_withExistingKey_preservesValueAndDoesNotGenerateNew() {
        ItemWithKey item = new ItemWithKey();
        item.setId(RECORD_ID);
        String preset = UUID.randomUUID().toString();
        item.setKeyAttribute(preset);

        Map<String, AttributeValue> items = ITEM_WITH_KEY_SCHEMA.itemToMap(item, true);
        assertThat(items).hasSize(2);

        WriteModification result =
            extension.beforeWrite(DefaultDynamoDbExtensionContext.builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_KEY_SCHEMA.tableMetadata())
                                                                 .operationName(OperationName.UPDATE_ITEM)
                                                                 .operationContext(PRIMARY_CONTEXT)
                                                                 .build());

        Map<String, AttributeValue> transformed = result.transformedItem();
        assertThat(transformed).isNotNull().hasSize(2);
        assertThat(transformed).containsEntry("id", AttributeValue.fromS(RECORD_ID));

        // Ensures the attribute remains a valid UUID without altering the preset value
        assertThat(isValidUuid(transformed.get("keyAttribute").s())).isTrue();
        assertThat(result.updateExpression()).isNull();
    }

    @Test
    public void updateItem_withoutKey_generatesNewUuid() {
        ItemWithKey item = new ItemWithKey();
        item.setId(RECORD_ID);

        Map<String, AttributeValue> items = ITEM_WITH_KEY_SCHEMA.itemToMap(item, true);
        assertThat(items).hasSize(1);

        WriteModification result =
            extension.beforeWrite(DefaultDynamoDbExtensionContext.builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_KEY_SCHEMA.tableMetadata())
                                                                 .operationName(OperationName.UPDATE_ITEM)
                                                                 .operationContext(PRIMARY_CONTEXT)
                                                                 .build());

        Map<String, AttributeValue> transformed = result.transformedItem();
        assertThat(transformed).isNotNull().hasSize(2);
        assertThat(transformed).containsEntry("id", AttributeValue.fromS(RECORD_ID));
        assertThat(isValidUuid(transformed.get("keyAttribute").s())).isTrue();
        assertThat(result.updateExpression()).isNull();
    }

    @Test
    public void updateItem_withMissingKeyAttribute_insertsGeneratedUuid() {
        ItemWithKey item = new ItemWithKey();
        item.setId(RECORD_ID);

        Map<String, AttributeValue> items = ITEM_WITH_KEY_SCHEMA.itemToMap(item, true);
        assertThat(items).hasSize(1);

        WriteModification result =
            extension.beforeWrite(DefaultDynamoDbExtensionContext.builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_KEY_SCHEMA.tableMetadata())
                                                                 .operationName(OperationName.UPDATE_ITEM)
                                                                 .operationContext(PRIMARY_CONTEXT)
                                                                 .build());

        assertThat(result.transformedItem()).isNotNull();
        assertThat(result.updateExpression()).isNull();
        assertThat(result.transformedItem()).hasSize(2);
        assertThat(isValidUuid(result.transformedItem().get("keyAttribute").s())).isTrue();
    }

    @Test
    public void nonStringTypeAnnotatedWithAutoGeneratedKey_throwsIllegalArgumentException() {
        assertThatExceptionOfType(IllegalArgumentException.class)
            .isThrownBy(() ->
                            StaticTableSchema.builder(ItemWithKey.class)
                                             .newItemSupplier(ItemWithKey::new)
                                             .addAttribute(String.class, a -> a.name("id")
                                                                               .getter(ItemWithKey::getId)
                                                                               .setter(ItemWithKey::setId)
                                                                               .addTag(primaryPartitionKey()))
                                             .addAttribute(Integer.class, a -> a.name("intAttribute")
                                                                                .getter(ItemWithKey::getIntAttribute)
                                                                                .setter(ItemWithKey::setIntAttribute)
                                                                                .addTag(AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                                             .addAttribute(String.class, a -> a.name("simpleString")
                                                                               .getter(ItemWithKey::getSimpleString)
                                                                               .setter(ItemWithKey::setSimpleString))
                                             .build()
            )
            .withMessage("Attribute 'intAttribute' of Class type class java.lang.Integer is not a suitable Java Class type "
                         + "to be used as a Auto Generated Key attribute. Only String Class type is supported.");
    }

    @Test
    public void autoGeneratedKey_onSecondaryPartitionKey_generatesUuid() {
        ItemWithKey item = new ItemWithKey();
        item.setId(RECORD_ID); // keyAttribute (GSI PK) is missing â†’ should be generated

        Map<String, AttributeValue> items = ITEM_WITH_KEY_SCHEMA.itemToMap(item, true);

        WriteModification result =
            extension.beforeWrite(DefaultDynamoDbExtensionContext.builder()
                                                                 .items(items)
                                                                 .tableMetadata(ITEM_WITH_KEY_SCHEMA.tableMetadata())
                                                                 .operationName(OperationName.PUT_ITEM)
                                                                 .operationContext(PRIMARY_CONTEXT)
                                                                 .build());

        Map<String, AttributeValue> transformed = result.transformedItem();
        assertThat(transformed).isNotNull();
        assertThat(isValidUuid(transformed.get("keyAttribute").s())).isTrue(); // generated for GSI PK
    }

    @Test
    public void autoGeneratedKey_onSecondarySortKey_generatesUuid() {
        ItemWithKey item = new ItemWithKey();
        item.setId(RECORD_ID); // simpleString (GSI/LSI) is missing â†’ should be generated

        Map<String, AttributeValue> items = LSI_SK_AUTOGEN_SCHEMA.itemToMap(item, true);

        WriteModification result =
            extension.beforeWrite(DefaultDynamoDbExtensionContext.builder()
                                                                 .items(items)
                                                                 .tableMetadata(LSI_SK_AUTOGEN_SCHEMA.tableMetadata())
                                                                 .operationName(OperationName.PUT_ITEM)
                                                                 .operationContext(PRIMARY_CONTEXT)
                                                                 .build());

        Map<String, AttributeValue> transformed = result.transformedItem();
        assertThat(transformed).isNotNull();
        assertThat(isValidUuid(transformed.get("simpleString").s())).isTrue(); // generated for index SK
    }

    @Test
    public void autoGeneratedKey_onNonKey_throwsIllegalArgumentException() {
        ItemWithKey item = new ItemWithKey();
        item.setId(RECORD_ID); // keyAttribute is annotated but NOT a key in this schema â†’ should fail at beforeWrite()

        Map<String, AttributeValue> items = INVALID_NONKEY_AUTOGEN_SCHEMA.itemToMap(item, true);

        assertThatExceptionOfType(IllegalArgumentException.class)
            .isThrownBy(() ->
                            extension.beforeWrite(DefaultDynamoDbExtensionContext.builder()
                                                                                 .items(items)
                                                                                 .tableMetadata(INVALID_NONKEY_AUTOGEN_SCHEMA.tableMetadata())
                                                                                 .operationName(OperationName.PUT_ITEM)
                                                                                 .operationContext(PRIMARY_CONTEXT)
                                                                                 .build())
            )
            .withMessageContaining("@DynamoDbAutoGeneratedKey can only be applied to key attributes: "
                                   + "primary partition key, primary sort key, or GSI/LSI partition/sort keys.")
            .withMessageContaining("keyAttribute");
    }

    private static class ItemWithKey {

        private String id;
        private String keyAttribute;
        private String simpleString;
        private Integer intAttribute;

        ItemWithKey() {
        }

        public Integer getIntAttribute() {
            return intAttribute;
        }

        public void setIntAttribute(Integer intAttribute) {
            this.intAttribute = intAttribute;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getKeyAttribute() {
            return keyAttribute;
        }

        public void setKeyAttribute(String keyAttribute) {
            this.keyAttribute = keyAttribute;
        }

        public String getSimpleString() {
            return simpleString;
        }

        public void setSimpleString(String simpleString) {
            this.simpleString = simpleString;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof ItemWithKey)) {
                return false;
            }
            ItemWithKey that = (ItemWithKey) o;
            return Objects.equals(id, that.id)
                   && Objects.equals(keyAttribute, that.keyAttribute)
                   && Objects.equals(simpleString, that.simpleString);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, keyAttribute, simpleString);
        }
    }
}
