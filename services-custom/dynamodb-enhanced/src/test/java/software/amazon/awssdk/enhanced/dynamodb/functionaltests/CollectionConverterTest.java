/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.enhanced.dynamodb.functionaltests;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.functionaltests.models.CustomType;
import software.amazon.awssdk.enhanced.dynamodb.internal.client.ExtensionResolver;
import software.amazon.awssdk.enhanced.dynamodb.mapper.testbeans.CollectionBean;

public class CollectionConverterTest extends LocalDynamoDbSyncTestBase {

    private static final String ID = "1";

    private static final TableSchema<CollectionBean> TABLE_SCHEMA =
        TableSchema.fromClass(CollectionBean.class);

    private final DynamoDbEnhancedClient enhancedClient =
        DynamoDbEnhancedClient.builder()
                              .dynamoDbClient(getDynamoDbClient())
                              .extensions(Stream.concat(
                                                    ExtensionResolver.defaultExtensions().stream(),
                                                    Stream.of(AutoGeneratedTimestampRecordExtension.create()))
                                                .collect(Collectors.toList()))
                              .build();

    private final DynamoDbTable<CollectionBean> mappedTable =
        enhancedClient.table(getConcreteTableName("table-name"), TABLE_SCHEMA);

    @Before
    public void createTable() {
        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
    }

    @After
    public void deleteTable() {
        getDynamoDbClient().deleteTable(r -> r.tableName(getConcreteTableName("table-name")));
    }

    @Test
    public void updateItemWithCustomTypeSet() {
        CollectionBean record = new CollectionBean()
            .setId(ID)
            .setCustomTypeSet(buildCustomTypeSet());

        mappedTable.updateItem(record);

        CollectionBean persisted = mappedTable.getItem(record);
        assertThat(persisted.getId()).isEqualTo("1");
        assertThat(persisted.getCustomTypeSet()).isEqualTo(buildCustomTypeSet());
    }

    @Test
    public void updateItemWithCustomTypeList() {
        CollectionBean record = new CollectionBean()
            .setId(ID)
            .setCustomTypeList(buildCustomTypeList());

        mappedTable.putItem(record);

        CollectionBean result = mappedTable.getItem(record);
        assertThat(result.getId()).isEqualTo(ID);
        assertThat(result.getCustomTypeList()).isEqualTo(buildCustomTypeList());
    }

    @Test
    public void updateItemWithCustomMapKey() {
        CollectionBean record = new CollectionBean()
            .setId(ID)
            .setCustomKeyMap(buildMapWithCustomKey());

        mappedTable.putItem(record);

        CollectionBean result = mappedTable.getItem(record);
        assertThat(result.getId()).isEqualTo(ID);
        assertThat(result.getCustomKeyMap()).isEqualTo(buildMapWithCustomKey());
    }

    @Test
    public void updateItemWithCustomMapValue() {
        CollectionBean record = new CollectionBean()
            .setId(ID)
            .setCustomValueMap(buildMapWithCustomValue());

        mappedTable.putItem(record);

        CollectionBean result = mappedTable.getItem(record);
        assertThat(result.getId()).isEqualTo(ID);
        assertThat(result.getCustomValueMap()).isEqualTo(buildMapWithCustomValue());
    }

    @Test
    public void updateItemWithStringsMap() {
        CollectionBean record = new CollectionBean()
            .setId(ID)
            .setLocalDate(LocalDate.of(2025, 1, 1))
            .setStringsMap(buildStringsMap());

        mappedTable.putItem(record);

        CollectionBean result = mappedTable.getItem(record);
        assertThat(result.getId()).isEqualTo(ID);
        assertThat(result.getLocalDate()).isEqualTo(LocalDate.of(2025, 1, 1));
        assertThat(result.getStringsMap()).isEqualTo(buildStringsMap());
    }


    private Set<CustomType> buildCustomTypeSet() {
        return new HashSet<>(Arrays.asList(buildFirstCustomElement(), buildSecondCustomElement()));
    }

    private List<CustomType> buildCustomTypeList() {
        return new ArrayList<>(Arrays.asList(buildFirstCustomElement(), buildSecondCustomElement()));
    }

    private Map<CustomType, String> buildMapWithCustomKey() {
        Map<CustomType, String> customKeyMap = new HashMap<>();
        customKeyMap.put(buildFirstCustomElement(), "mapValue");
        return customKeyMap;
    }

    private Map<String, CustomType> buildMapWithCustomValue() {
        Map<String, CustomType> customValueMap = new HashMap<>();
        customValueMap.put("mapKey", buildFirstCustomElement());
        return customValueMap;
    }

    private Map<String, String> buildStringsMap() {
        Map<String, String> stringsMap = new HashMap<>();
        stringsMap.put("stringMapAttribute1", "mapValue1");
        stringsMap.put("stringMapAttribute2", "mapValue2");
        stringsMap.put("stringMapAttribute3", "mapValue3");
        return stringsMap;
    }

    private CustomType buildFirstCustomElement() {
        return new CustomType()
            .setBooleanAttribute(Boolean.TRUE)
            .setIntegerAttribute(1)
            .setDoubleAttribute(100.0)
            .setStringAttribute("test1")
            .setLocalDateAttribute(LocalDate.of(2025, 1, 1));
    }

    private CustomType buildSecondCustomElement() {
        return new CustomType()
            .setBooleanAttribute(Boolean.FALSE)
            .setIntegerAttribute(2)
            .setDoubleAttribute(200.0)
            .setStringAttribute("test2")
            .setLocalDateAttribute(LocalDate.of(2025, 5, 5));
    }
}
