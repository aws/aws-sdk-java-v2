/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.enhanced.dynamodb.functionaltests;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.Assert.assertEquals;
import static software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedUuidExtension.AttributeTags.autoGeneratedUuidAttribute;
import static software.amazon.awssdk.enhanced.dynamodb.internal.AttributeValues.stringValue;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.primaryPartitionKey;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.updateBehavior;

import com.fasterxml.uuid.Generators;
import java.util.Arrays;
import java.util.Collection;
import java.util.Objects;
import java.util.UUID;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.Expression;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedUuidExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedUuid;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableSchema;
import software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbFlatten;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbUpdateBehavior;
import software.amazon.awssdk.enhanced.dynamodb.model.PutItemEnhancedRequest;
import software.amazon.awssdk.services.dynamodb.model.ConditionalCheckFailedException;

@RunWith(Parameterized.class)
public class AutoGeneratedUuidRecordTest extends LocalDynamoDbSyncTestBase {

    private static final Pattern UUID_PATTERN = Pattern.compile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");
    private static final String TABLE_NAME = "table-name";
    private final DynamoDbTable<Record> mappedTable;
    private final Consumer<String> assertUuidVersion;

    public AutoGeneratedUuidRecordTest(String ignoredTestName,
                                       TableSchema<Record> recordTableSchema,
                                       AutoGeneratedUuidExtension autoGeneratedUuidExtension,
                                       Consumer<String> assertUuidVersion) {
        this.assertUuidVersion = assertUuidVersion;
        this.mappedTable = DynamoDbEnhancedClient.builder()
                                                 .dynamoDbClient(getDynamoDbClient())
                                                 .extensions(autoGeneratedUuidExtension)
                                                 .build()
                                                 .table(getConcreteTableName(TABLE_NAME), recordTableSchema);
    }

    private static final TableSchema<FlattenedRecord> FLATTENED_TABLE_SCHEMA =
        StaticTableSchema.builder(FlattenedRecord.class)
                         .newItemSupplier(FlattenedRecord::new)
                         .addAttribute(String.class, a -> a.name("generated")
                                                           .getter(FlattenedRecord::getGenerated)
                                                           .setter(FlattenedRecord::setGenerated)
                                                           .tags(autoGeneratedUuidAttribute()))
                         .build();

    private static final TableSchema<Record> TABLE_SCHEMA =
        StaticTableSchema.builder(Record.class)
                         .newItemSupplier(Record::new)
                         .addAttribute(String.class, a -> a.name("id")
                                                           .getter(Record::getId)
                                                           .setter(Record::id)
                                                           .tags(primaryPartitionKey()))
                         .addAttribute(String.class, a -> a.name("attribute")
                                                           .getter(Record::getAttribute)
                                                           .setter(Record::setAttribute))
                         .addAttribute(String.class, a -> a.name("lastUpdatedUuid")
                                                           .getter(Record::getLastUpdatedUuid)
                                                           .setter(Record::setLastUpdatedUuid)
                                                           .tags(autoGeneratedUuidAttribute()))
                         .addAttribute(String.class, a -> a.name("createdUuid")
                                                           .getter(Record::getCreatedUuid)
                                                           .setter(Record::setCreatedUuid)
                                                           .tags(autoGeneratedUuidAttribute(),
                                                                 updateBehavior(UpdateBehavior.WRITE_IF_NOT_EXISTS)))
                         .flatten(FLATTENED_TABLE_SCHEMA, Record::getFlattenedRecord, Record::setFlattenedRecord)
                         .build();


    @Parameters(name = "{index};  {0}")
    public static Collection<Object[]> data() {
        Supplier<UUID> supplierUuidV7 = () -> Generators.timeBasedEpochGenerator().generate();
        Consumer<String> assertUUIDv4 = uuid -> assertEquals(4, UUID.fromString(uuid).version());
        Consumer<String> assertUUIDv7 = uuid -> assertEquals(7, UUID.fromString(uuid).version());

        return Arrays.asList(new Object[][] {
            {
                "StaticTableSchema Schema assigned with Java UUID", TABLE_SCHEMA,
                AutoGeneratedUuidExtension.create(),
                assertUUIDv4
            },
            {
                "Bean Schema assigned with Java UUID",
                TableSchema.fromClass(Record.class),
                AutoGeneratedUuidExtension.builder().build(),
                assertUUIDv4
            },
            {
                "StaticTableSchema Schema assigned custom UUIDv7", TABLE_SCHEMA,
                AutoGeneratedUuidExtension.builder().uuidSupplier(supplierUuidV7).build(),
                assertUUIDv7
            },
            {
                "Bean Schema assigned with custom UUIDv7",
                TableSchema.fromClass(Record.class),
                AutoGeneratedUuidExtension.builder().uuidSupplier(supplierUuidV7).build(),
                assertUUIDv7
            }
        });
    }

    @Before
    public void createTable() {
        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
    }

    @After
    public void deleteTable() {
        mappedTable.deleteTable();
    }

    @Test
    public void putNewRecordSetsInitialAutoGeneratedUuid() {
        Record item = new Record().id("id").attribute("one");
        mappedTable.putItem(r -> r.item(item));
        Record result = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        // All UUID generated are unique
        assertThat(result.getCreatedUuid()).isNotEqualTo(result.lastUpdatedUuid);
        assertThat(result.getLastUpdatedUuid()).isNotEqualTo(result.flattenedRecord.getGenerated());

        // Al uuid generated match the UUID pattern
        assertRecordHasValidUuid(result);
    }

    @Test
    public void putItemFollowedByUpdates() {

        mappedTable.putItem(r -> r.item(new Record().id("id").attribute("newItem")));
        Record result = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));

        String createdUuidAfterPut = result.getCreatedUuid();
        String lastUpdatedUuiAfterPut = result.getLastUpdatedUuid();
        String flattenedRecordAfterPut = result.getFlattenedRecord().getGenerated();

        assertRecordHasValidUuid(result);

        // All UUID generated are unique
        assertThat(result.getCreatedUuid()).isNotEqualTo(result.lastUpdatedUuid);
        assertThat(result.getLastUpdatedUuid()).isNotEqualTo(result.flattenedRecord.getGenerated());

        // UPDATE
        mappedTable.updateItem(r -> r.item(new Record().id("id").attribute("UpdatedItem")));

        Record afterUpdate = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        assertRecordHasValidUuid(afterUpdate);

        // All UUID generated are unique
        assertThat(afterUpdate.getCreatedUuid()).isNotEqualTo(afterUpdate.lastUpdatedUuid);
        assertThat(afterUpdate.getLastUpdatedUuid()).isNotEqualTo(afterUpdate.flattenedRecord.getGenerated());

        // UpdateBehavior.WRITE_IF_NOT_EXISTS , the old UUID is not changed
        assertThat(afterUpdate.getCreatedUuid()).isEqualTo(createdUuidAfterPut);

        // UpdateBehavior.WRITE_ALWAYS
        assertThat(afterUpdate.getLastUpdatedUuid()).isNotEqualTo(lastUpdatedUuiAfterPut);
        assertThat(afterUpdate.getFlattenedRecord().getGenerated()).isNotEqualTo(flattenedRecordAfterPut);
        assertThat(afterUpdate.getAttribute()).isEqualTo("UpdatedItem");
        assertThat(afterUpdate.getId()).isEqualTo("id");
    }

    @Test
    public void putExistingRecordWithConditionExpressions() {
        mappedTable.putItem(r -> r.item(new Record().id("newId").attribute("one")));
        Record result = mappedTable.getItem(r -> r.key(k -> k.partitionValue("newId")));
        assertRecordHasValidUuid(result);
        String createdUuidAfterPut = result.getCreatedUuid();
        String lastUpdatedUuiAfterPut = result.getLastUpdatedUuid();
        String flattenedRecordAfterPut = result.getFlattenedRecord().getGenerated();
        Expression conditionExpression = Expression.builder()
                                                         .expression("#k = :v OR #k = :v1")
                                                         .putExpressionName("#k", "attribute")
                                                         .putExpressionValue(":v", stringValue("one"))
                                                         .putExpressionValue(":v1", stringValue("wrong2"))
                                                         .build();

        mappedTable.putItem(PutItemEnhancedRequest.builder(Record.class)
                                                  .item(new Record().id("newId").attribute("conditionalUpdate"))
                                                  .conditionExpression(conditionExpression)
                                                  .build());

        Record afterUpdate = mappedTable.getItem(r -> r.key(k -> k.partitionValue("newId")));

        // UpdateBehavior.WRITE_IF_NOT_EXISTS , this gets changed because this is a put
        assertThat(afterUpdate.getCreatedUuid()).isNotEqualTo(createdUuidAfterPut);

        // UpdateBehavior.WRITE_ALWAYS
        assertThat(afterUpdate.getLastUpdatedUuid()).isNotEqualTo(lastUpdatedUuiAfterPut);
        assertThat(afterUpdate.getFlattenedRecord().getGenerated()).isNotEqualTo(flattenedRecordAfterPut);
        assertThat(afterUpdate.getAttribute()).isEqualTo("conditionalUpdate");
        assertThat(afterUpdate.getId()).isEqualTo("newId");
    }

    @Test
    public void updateExistingRecordWithConditionExpressions() {
        mappedTable.putItem(r -> r.item(new Record().id("id").attribute("one")));
        Record result = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        assertRecordHasValidUuid(result);
        String createdUuidAfterPut = result.getCreatedUuid();
        String lastUpdatedUuiAfterPut = result.getLastUpdatedUuid();
        String flattenedRecordAfterPut = result.getFlattenedRecord().getGenerated();
        Expression conditionExpression = Expression.builder()
                                                         .expression("#k = :v OR #k = :v1")
                                                         .putExpressionName("#k", "attribute")
                                                         .putExpressionValue(":v", stringValue("one"))
                                                         .putExpressionValue(":v1", stringValue("wrong2"))
                                                         .build();

        mappedTable.updateItem(r -> r.item(new Record().id("id").attribute("conditionalUpdate"))
                                     .conditionExpression(conditionExpression));
        Record afterUpdate = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        // UpdateBehavior.WRITE_IF_NOT_EXISTS , this gets changed because this is a put
        assertThat(afterUpdate.getCreatedUuid()).isEqualTo(createdUuidAfterPut);
        // UpdateBehavior.WRITE_ALWAYS
        assertThat(afterUpdate.getLastUpdatedUuid()).isNotEqualTo(lastUpdatedUuiAfterPut);
        assertThat(afterUpdate.getFlattenedRecord().getGenerated()).isNotEqualTo(flattenedRecordAfterPut);
        assertThat(afterUpdate.getAttribute()).isEqualTo("conditionalUpdate");
        assertThat(afterUpdate.getId()).isEqualTo("id");
    }

    @Test
    public void putItemConditionTestFailure() {
        mappedTable.putItem(r -> r.item(new Record().id("id").attribute("one")));
        Expression conditionExpression = Expression.builder()
                                                         .expression("#k = :v OR #k = :v1")
                                                         .putExpressionName("#k", "attribute")
                                                         .putExpressionValue(":v", stringValue("wrong1"))
                                                         .putExpressionValue(":v1", stringValue("wrong2"))
                                                         .build();
        PutItemEnhancedRequest<Record> putItemRequest = PutItemEnhancedRequest.builder(Record.class)
                                                                                    .item(new Record().id("id").attribute("one"))
                                                                                    .conditionExpression(conditionExpression)
                                                                                    .build();
        assertThatThrownBy(() -> mappedTable.putItem(putItemRequest))
            .isExactlyInstanceOf(ConditionalCheckFailedException.class)
            .hasMessageContaining("The conditional request failed");
    }

    @Test
    public void updateItemConditionTestFailure() {
        Record updated = mappedTable.updateItem(r -> r.item(new Record().id("id").attribute("one")));
        assertRecordHasValidUuid(updated);
        Expression conditionExpression = Expression.builder()
                                                         .expression("#k = :v OR #k = :v1")
                                                         .putExpressionName("#k", "attribute")
                                                         .putExpressionValue(":v", stringValue("wrong1"))
                                                         .putExpressionValue(":v1", stringValue("wrong2"))
                                                         .build();
        Record toUpdate = new Record().id("id").attribute("conditionalUpdate");

        assertThatThrownBy(() -> mappedTable.updateItem(r -> r.item(toUpdate).conditionExpression(conditionExpression)))
            .isExactlyInstanceOf(ConditionalCheckFailedException.class)
            .hasMessageContaining("The conditional request failed");

    }

    private void assertRecordHasValidUuid(Record result) {
        assertThat(result.getCreatedUuid())
            .matches(UUID_PATTERN)
            .satisfies(assertUuidVersion);
        assertThat(result.getLastUpdatedUuid())
            .matches(UUID_PATTERN).
            satisfies(assertUuidVersion);
        assertThat(result.getFlattenedRecord().getGenerated())
            .matches(UUID_PATTERN)
            .satisfies(assertUuidVersion);
    }

    @DynamoDbBean
    public static class Record {

        private String id;
        private String attribute;
        private String createdUuid;
        private String lastUpdatedUuid;
        private FlattenedRecord flattenedRecord;

        @DynamoDbPartitionKey
        public String getId() {
            return this.id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getAttribute() {
            return attribute;
        }

        public void setAttribute(String attribute) {
            this.attribute = attribute;
        }

        public Record attribute(String attribute) {
            this.attribute = attribute;
            return this;
        }

        @DynamoDbAutoGeneratedUuid
        public String getLastUpdatedUuid() {
            return lastUpdatedUuid;
        }

        public void setLastUpdatedUuid(String lastUpdatedUuid) {
            this.lastUpdatedUuid = lastUpdatedUuid;
        }

        @DynamoDbAutoGeneratedUuid
        @DynamoDbUpdateBehavior(value = UpdateBehavior.WRITE_IF_NOT_EXISTS)
        public String getCreatedUuid() {
            return createdUuid;
        }

        public void setCreatedUuid(String createdUuid) {
            this.createdUuid = createdUuid;
        }

        @DynamoDbFlatten
        public FlattenedRecord getFlattenedRecord() {
            return flattenedRecord;
        }

        public void setFlattenedRecord(FlattenedRecord flattenedRecord) {
            this.flattenedRecord = flattenedRecord;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            Record that = (Record) o;
            return Objects.equals(id, that.id) &&
                   Objects.equals(attribute, that.attribute) &&
                   Objects.equals(lastUpdatedUuid, that.lastUpdatedUuid) &&
                   Objects.equals(createdUuid, that.createdUuid) &&
                   Objects.equals(flattenedRecord, that.flattenedRecord);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, attribute, lastUpdatedUuid, createdUuid, flattenedRecord);
        }

        @Override
        public String toString() {
            return "Record{" +
                   "id='" + id + '\'' +
                   ", attribute='" + attribute + '\'' +
                   ", createdUuid=" + createdUuid +
                   ", lastUpdatedUuid=" + lastUpdatedUuid +
                   ", flattenedRecord=" + flattenedRecord +
                   '}';
        }

        public Record id(String id) {
            this.id = id;
            return this;
        }
    }

    @DynamoDbBean
    public static class FlattenedRecord {
        private String generated;

        @DynamoDbAutoGeneratedUuid
        public String getGenerated() {
            return generated;
        }

        public void setGenerated(String generated) {
            this.generated = generated;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            FlattenedRecord that = (FlattenedRecord) o;
            return Objects.equals(generated, that.generated);
        }

        @Override
        public int hashCode() {
            return Objects.hash(generated);
        }

        @Override
        public String toString() {
            return "FlattenedRecord{" +
                   "generated=" + generated +
                   '}';
        }
    }
}
