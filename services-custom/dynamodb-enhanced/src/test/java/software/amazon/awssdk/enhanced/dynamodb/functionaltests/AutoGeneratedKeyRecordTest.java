/*
 * Copyright Amazon.com, Inc. or its affiliates.
 * Licensed under the Apache License, Version 2.0.
 */

package software.amazon.awssdk.enhanced.dynamodb.functionaltests;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static software.amazon.awssdk.enhanced.dynamodb.functionaltests.AutoGeneratedUuidRecordTest.assertValidUuid;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.primaryPartitionKey;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.secondaryPartitionKey;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.secondarySortKey;
import static software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTags.updateBehavior;

import java.util.Arrays;
import java.util.Collection;
import java.util.Objects;
import org.assertj.core.api.Assertions;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedKeyExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedKey;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbVersionAttribute;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableSchema;
import software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbFlatten;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbPartitionKey;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSecondaryPartitionKey;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbSecondarySortKey;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbUpdateBehavior;

@RunWith(Parameterized.class)
public class AutoGeneratedKeyRecordTest extends LocalDynamoDbSyncTestBase {

    private final String tableName = getConcreteTableName("AutoGenKey-table");
    private final String versionedTableName = getConcreteTableName("AutoGenKey-versioned-table");
    private final DynamoDbTable<RecordWithMixedUpdateBehaviours> mappedTable;

    public AutoGeneratedKeyRecordTest(String testName,
                                      TableSchema<RecordWithMixedUpdateBehaviours> schema) {
        this.mappedTable = DynamoDbEnhancedClient.builder()
                                                 .dynamoDbClient(getDynamoDbClient())
                                                 .extensions(AutoGeneratedKeyExtension.builder().build())
                                                 .build()
                                                 .table(tableName, schema);
    }

    /*
     Flattened bean schema: "generated" attribute is a GSI PK + @DynamoDbAutoGeneratedKey annotation
     */
    private static final TableSchema<FlattenedRecord> FLATTENED =
        StaticTableSchema.builder(FlattenedRecord.class)
                         .newItemSupplier(FlattenedRecord::new)
                         .addAttribute(String.class, a -> a.name("generated")
                                                           .getter(FlattenedRecord::getGenerated)
                                                           .setter(FlattenedRecord::generated)
                                                           .tags(secondaryPartitionKey("gsi_flat"),
                                                                 AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                         .build();

     /**
     * - id:              PK
     * - lastUpdatedKey:  GSI PK + @DynamoDbAutoGeneratedKey annotation (UpdateBehaviour is WRITE_ALWAYS - default value)
     * - createdKey:      GSI SK + @DynamoDbAutoGeneratedKey annotation (UpdateBehaviour is WRITE_IF_NOT_EXISTS)
     */
    private static final TableSchema<RecordWithMixedUpdateBehaviours> STATIC_SCHEMA =
        StaticTableSchema.builder(RecordWithMixedUpdateBehaviours.class)
                         .newItemSupplier(RecordWithMixedUpdateBehaviours::new)
                         .addAttribute(String.class, a -> a.name("id")
                                                           .getter(RecordWithMixedUpdateBehaviours::getId)
                                                           .setter(RecordWithMixedUpdateBehaviours::id)
                                                           .addTag(primaryPartitionKey()))
                         .addAttribute(String.class, a -> a.name("attribute")
                                                           .getter(RecordWithMixedUpdateBehaviours::getAttribute)
                                                           .setter(RecordWithMixedUpdateBehaviours::attribute))
                         .addAttribute(String.class, a -> a.name("lastUpdatedKey")
                                                           .getter(RecordWithMixedUpdateBehaviours::getLastUpdatedKey)
                                                           .setter(RecordWithMixedUpdateBehaviours::lastUpdatedKey)
                                                           .tags(secondaryPartitionKey("gsi_auto"),
                                                                 AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                         .addAttribute(String.class, a -> a.name("createdKey")
                                                           .getter(RecordWithMixedUpdateBehaviours::getCreatedKey)
                                                           .setter(RecordWithMixedUpdateBehaviours::createdKey)
                                                           .tags(secondarySortKey("gsi_auto"),
                                                                 AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute(),
                                                                 updateBehavior(UpdateBehavior.WRITE_IF_NOT_EXISTS)))
                         .flatten(FLATTENED,
                                  RecordWithMixedUpdateBehaviours::getFlattened,
                                  RecordWithMixedUpdateBehaviours::flattened)
                         .build();

    @Parameters(name = "{index}: {0}")
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
            {"StaticTableSchema", STATIC_SCHEMA},
            {"BeanTableSchema", TableSchema.fromBean(RecordWithMixedUpdateBehaviours.class)}
        });
    }

    @Before
    public void createTable() {
        mappedTable.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
    }

    @After
    public void deleteTable() {
        mappedTable.deleteTable();
    }

    @Test
    public void put_generatesAllAnnotatedKeys() {
        mappedTable.putItem(r -> r.item(new RecordWithMixedUpdateBehaviours()
                                            .id("id").attribute("one")
                                            .flattened(new FlattenedRecord())));

        RecordWithMixedUpdateBehaviours out = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        assertValidUuid(out.getCreatedKey());
        assertValidUuid(out.getLastUpdatedKey());
        assertValidUuid(out.getFlattened().getGenerated());
        assertThat(out.getCreatedKey()).isNotEqualTo(out.getLastUpdatedKey());
    }

    @Test
    public void update_preservesKeysWithWriteIfNotExists_and_regeneratesKeysWithWriteAlways() {
        mappedTable.putItem(r -> r.item(new RecordWithMixedUpdateBehaviours()
                                            .id("id").attribute("one")
                                            .flattened(new FlattenedRecord())));

        RecordWithMixedUpdateBehaviours afterPut = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        String createdAtPut = afterPut.getCreatedKey();                     // WRITE_IF_NOT_EXISTS → should keep
        String lastUpdatedAtPut = afterPut.getLastUpdatedKey();             // WRITE_ALWAYS (default) → should change
        String flatGeneratedAtPut = afterPut.getFlattened().getGenerated(); // WRITE_ALWAYS (default) → should change

        mappedTable.updateItem(r -> r.item(new RecordWithMixedUpdateBehaviours()
                                               .id("id").attribute("two")
                                               .flattened(new FlattenedRecord())));

        RecordWithMixedUpdateBehaviours afterUpdate = mappedTable.getItem(r -> r.key(k -> k.partitionValue("id")));
        assertThat(afterUpdate.getCreatedKey()).isEqualTo(createdAtPut); // preserved
        assertThat(afterUpdate.getLastUpdatedKey()).isNotEqualTo(lastUpdatedAtPut);
        assertThat(afterUpdate.getFlattened().getGenerated()).isNotEqualTo(flatGeneratedAtPut);
    }

    @Test
    public void autogenerateKey_setOnGsiPartitionKey_performsUuidGeneration() {
        String tableName = getConcreteTableName("autogen-gsi-pk");
        DynamoDbEnhancedClient client = DynamoDbEnhancedClient.builder()
                                                              .dynamoDbClient(getDynamoDbClient())
                                                              .extensions(AutoGeneratedKeyExtension.builder().build())
                                                              .build();

        TableSchema<GsiPartitionKeyBean> schema = StaticTableSchema.builder(GsiPartitionKeyBean.class)
                                                                   .newItemSupplier(GsiPartitionKeyBean::new)
                                                                   .addAttribute(String.class, a -> a.name("id")
                                                                                                     .getter(GsiPartitionKeyBean::getId)
                                                                                                     .setter(GsiPartitionKeyBean::setId)
                                                                                                     .addTag(primaryPartitionKey()))
                                                                   .addAttribute(String.class, a -> a.name("gsiPk")
                                                                                                     .getter(GsiPartitionKeyBean::getGsiPk)
                                                                                                     .setter(GsiPartitionKeyBean::setGsiPk)
                                                                                                     .tags(secondaryPartitionKey("gsi1"),
                                                                                                           AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                                                                   .build();

        DynamoDbTable<GsiPartitionKeyBean> table = client.table(tableName, schema);
        try {
            table.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
            GsiPartitionKeyBean bean = new GsiPartitionKeyBean();
            bean.setId("id123"); // gsiPk missing → should be generated
            table.putItem(bean);

            GsiPartitionKeyBean out = table.getItem(r -> r.key(k -> k.partitionValue("id123")));
            assertValidUuid(out.getGsiPk());
        } finally {
            deleteTableByName(tableName);
        }
    }

    @Test
    public void autogenerateKey_setOnSecondaryIndexSortKey_performsUuidGeneration() {
        String tableName = getConcreteTableName("autogen-idx-sk");
        DynamoDbEnhancedClient client = DynamoDbEnhancedClient.builder()
                                                              .dynamoDbClient(getDynamoDbClient())
                                                              .extensions(AutoGeneratedKeyExtension.builder().build())
                                                              .build();

        TableSchema<SecondaryIndexSortKeyBean> schema = StaticTableSchema.builder(SecondaryIndexSortKeyBean.class)
                                                                         .newItemSupplier(SecondaryIndexSortKeyBean::new)
                                                                         .addAttribute(String.class, a -> a.name("id")
                                                                                                           .getter(SecondaryIndexSortKeyBean::getId)
                                                                                                           .setter(SecondaryIndexSortKeyBean::setId)
                                                                                                           .addTag(primaryPartitionKey()))
                                                                         .addAttribute(String.class, a -> a.name(
                                                                                                               "secondarySortKey")
                                                                                                           .getter(SecondaryIndexSortKeyBean::getSecondarySortKey)
                                                                                                           .setter(SecondaryIndexSortKeyBean::setSecondarySortKey)
                                                                                                           .tags(secondarySortKey("lsi1"),
                                                                                                                 AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                                                                         .build();

        DynamoDbTable<SecondaryIndexSortKeyBean> table = client.table(tableName, schema);
        try {
            table.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
            SecondaryIndexSortKeyBean bean = new SecondaryIndexSortKeyBean();
            bean.setId("id123"); // secondarySortKey missing → should be generated
            table.putItem(bean);

            SecondaryIndexSortKeyBean out = table.getItem(r -> r.key(k -> k.partitionValue("id123")));
            assertValidUuid(out.getSecondarySortKey());
        } finally {
            deleteTableByName(tableName);
        }
    }

    @Test
    public void autogenerateKey_setOnInvalidKeyAttribute_throws_exception() {
        String tableName = getConcreteTableName("autogen-non-key");
        DynamoDbEnhancedClient client = DynamoDbEnhancedClient.builder()
                                                              .dynamoDbClient(getDynamoDbClient())
                                                              .extensions(AutoGeneratedKeyExtension.builder().build())
                                                              .build();

        TableSchema<NonKeyBean> schema = StaticTableSchema.builder(NonKeyBean.class)
                                                          .newItemSupplier(NonKeyBean::new)
                                                          .addAttribute(String.class, a -> a.name("id")
                                                                                            .getter(NonKeyBean::getId)
                                                                                            .setter(NonKeyBean::setId)
                                                                                            .addTag(primaryPartitionKey()))
                                                          .addAttribute(String.class, a -> a.name("notAKey")
                                                                                            .getter(NonKeyBean::getNotAKey)
                                                                                            .setter(NonKeyBean::setNotAKey)
                                                                                            .addTag(AutoGeneratedKeyExtension.AttributeTags.autoGeneratedKeyAttribute()))
                                                          .build();

        DynamoDbTable<NonKeyBean> table = client.table(tableName, schema);
        try {
            table.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));
            NonKeyBean bean = new NonKeyBean();
            bean.setId("id123");
            Assertions.assertThatExceptionOfType(IllegalArgumentException.class)
                      .isThrownBy(() -> table.putItem(bean))
                      .withMessageContaining("@DynamoDbAutoGeneratedKey can only be applied to key attributes: "
                                             + "primary partition key, primary sort key, or GSI/LSI partition/sort keys.")
                      .withMessageContaining("notAKey");
        } finally {
            deleteTableByName(tableName);
        }
    }

    @Test
    public void autogenerateKey_onVersionedRecord_setOnPrimaryKey_performsUuidGeneration() {
        DynamoDbEnhancedClient client = DynamoDbEnhancedClient.builder()
                                                              .dynamoDbClient(getDynamoDbClient())
                                                              .extensions(AutoGeneratedKeyExtension.builder().build(),
                                                                          VersionedRecordExtension.builder().build())
                                                              .build();

        TableSchema<VersionedRecord> schema = TableSchema.fromBean(VersionedRecord.class);
        DynamoDbTable<VersionedRecord> table = client.table(versionedTableName, schema);

        try {
            table.createTable(r -> r.provisionedThroughput(getDefaultProvisionedThroughput()));

            VersionedRecord rec = new VersionedRecord();
            rec.setPayload("payload");
            table.putItem(rec);

            VersionedRecord existing =
                table.scan().items().stream().findFirst()
                     .orElseThrow(() -> new AssertionError("No record found in table"));

            assertEquals("payload", existing.getPayload());
            assertThat(existing.getVersion()).isEqualTo(1L);

            existing.setPayload("new_payload");
            VersionedRecord updated = table.updateItem(existing);

            assertEquals("new_payload", updated.getPayload());
            assertThat(updated.getVersion()).isEqualTo(2L);
        } finally {
            deleteTableByName(versionedTableName);
        }
    }

    /**
     * - createdKey:          GSI SK + @DynamoDbAutoGeneratedKey annotation (UpdateBehaviour is WRITE_IF_NOT_EXISTS)
     * - lastUpdatedKey:      GSI PK + @DynamoDbAutoGeneratedKey annotation (UpdateBehaviour is WRITE_ALWAYS - default value)
     * - flattened.generated: GSI PK + @DynamoDbAutoGeneratedKey
     */
    @DynamoDbBean
    public static class RecordWithMixedUpdateBehaviours {
        private String id;
        private String attribute;
        private String createdKey;
        private String lastUpdatedKey;
        private FlattenedRecord flattened;

        @DynamoDbPartitionKey
        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public RecordWithMixedUpdateBehaviours id(String v) {
            this.id = v;
            return this;
        }

        public String getAttribute() {
            return attribute;
        }

        public void setAttribute(String attribute) {
            this.attribute = attribute;
        }

        public RecordWithMixedUpdateBehaviours attribute(String v) {
            this.attribute = v;
            return this;
        }

        @DynamoDbAutoGeneratedKey
        @DynamoDbSecondarySortKey(indexNames = "gsi_auto")
        @DynamoDbUpdateBehavior(UpdateBehavior.WRITE_IF_NOT_EXISTS)
        public String getCreatedKey() {
            return createdKey;
        }

        public void setCreatedKey(String createdKey) {
            this.createdKey = createdKey;
        }

        public RecordWithMixedUpdateBehaviours createdKey(String v) {
            this.createdKey = v;
            return this;
        }

        @DynamoDbAutoGeneratedKey
        @DynamoDbSecondaryPartitionKey(indexNames = "gsi_auto")
        public String getLastUpdatedKey() {
            return lastUpdatedKey;
        }

        public void setLastUpdatedKey(String lastUpdatedKey) {
            this.lastUpdatedKey = lastUpdatedKey;
        }

        public RecordWithMixedUpdateBehaviours lastUpdatedKey(String v) {
            this.lastUpdatedKey = v;
            return this;
        }

        @DynamoDbFlatten
        public FlattenedRecord getFlattened() {
            return flattened;
        }

        public void setFlattened(FlattenedRecord fr) {
            this.flattened = fr;
        }

        public RecordWithMixedUpdateBehaviours flattened(FlattenedRecord fr) {
            this.flattened = fr;
            return this;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof RecordWithMixedUpdateBehaviours)) {
                return false;
            }
            RecordWithMixedUpdateBehaviours that = (RecordWithMixedUpdateBehaviours) o;
            return Objects.equals(id, that.id)
                   && Objects.equals(attribute, that.attribute)
                   && Objects.equals(createdKey, that.createdKey)
                   && Objects.equals(lastUpdatedKey, that.lastUpdatedKey)
                   && Objects.equals(flattened, that.flattened);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, attribute, createdKey, lastUpdatedKey, flattened);
        }
    }

    @DynamoDbBean
    public static class FlattenedRecord {
        private String generated;

        @DynamoDbAutoGeneratedKey
        @DynamoDbSecondaryPartitionKey(indexNames = "gsi_flat")
        public String getGenerated() {
            return generated;
        }

        public void setGenerated(String generated) {
            this.generated = generated;
        }

        public FlattenedRecord generated(String g) {
            this.generated = g;
            return this;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof FlattenedRecord)) {
                return false;
            }
            FlattenedRecord that = (FlattenedRecord) o;
            return Objects.equals(generated, that.generated);
        }

        @Override
        public int hashCode() {
            return Objects.hash(generated);
        }
    }

    public static class GsiPartitionKeyBean {
        private String id;
        private String gsiPk;

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getGsiPk() {
            return gsiPk;
        }

        public void setGsiPk(String gsiPk) {
            this.gsiPk = gsiPk;
        }
    }

    public static class SecondaryIndexSortKeyBean {
        private String id;
        private String secondarySortKey;

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getSecondarySortKey() {
            return secondarySortKey;
        }

        public void setSecondarySortKey(String secondarySortKey) {
            this.secondarySortKey = secondarySortKey;
        }
    }

    public static class NonKeyBean {
        private String id;
        private String notAKey;

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getNotAKey() {
            return notAKey;
        }

        public void setNotAKey(String notAKey) {
            this.notAKey = notAKey;
        }
    }

    @DynamoDbBean
    public static class VersionedRecord {
        private String id;
        private Long version;
        private String payload;

        @DynamoDbPartitionKey
        @DynamoDbAutoGeneratedKey
        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        @DynamoDbVersionAttribute
        public Long getVersion() {
            return version;
        }

        public void setVersion(Long version) {
            this.version = version;
        }

        public String getPayload() {
            return payload;
        }

        public void setPayload(String payload) {
            this.payload = payload;
        }
    }

    private void deleteTableByName(String tableName) {
        getDynamoDbClient().deleteTable(b -> b.tableName(tableName));
    }
}
