/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package software.amazon.awssdk.enhanced.dynamodb.extensions;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.function.Consumer;
import software.amazon.awssdk.annotations.SdkPublicApi;
import software.amazon.awssdk.annotations.ThreadSafe;
import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbExtensionContext;
import software.amazon.awssdk.enhanced.dynamodb.EnhancedType;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTag;
import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableMetadata;
import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.utils.StringUtils;
import software.amazon.awssdk.utils.Validate;


/**
 * This extension facilitates the automatic generation of a unique UUID (Universally Unique Identifier) for attributes tagged with
 * {@code @DynamoDbAutoGeneratedUuid} or {@link AutoGeneratedUuidExtension.AttributeTags#autoGeneratedUuidAttribute()}. The
 * generated UUID is obtained using {@link java.util.UUID#randomUUID()}.
 *
 * <p>Usage:</p>
 * <ul>
 *   <li>This extension is not loaded by default; register it explicitly when building
 *       a {@link software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient}.</li>
 *   <li>The annotated attribute must be of type {@link String}.</li>
 *   <li>If the attribute is <b>missing or empty</b> in the item being written, a UUID
 *       will be generated and set in the outgoing request map.</li>
 *   <li>If the attribute already has a non-empty value, it is preserved and not overwritten.</li>
 * </ul>
 *
 * <p><b>Update behavior:</b></p>
 * <ul>
 *   <li>With the default {@link software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior#WRITE_ALWAYS},
 *       a missing attribute on an update will cause a new UUID to be generated and written.</li>
 *   <li>With {@link software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior#WRITE_IF_NOT_EXISTS},
 *       a missing attribute on an update will cause a UUID to be generated in the outgoing map,
 *       but DynamoDB will preserve the existing stored value thanks to the conditional
 *       <code>if_not_exists(...)</code> expression the mapper generates.</li>
 * </ul>
 *
 * <p><b>Difference between putItem and updateItem:</b></p>
 * <ul>
 *   <li>{@code putItem} always replaces the entire item. If the field is absent in the payload, the extension
 *       will generate a new UUID, even when {@code WRITE_IF_NOT_EXISTS} is specified.</li>
 *   <li>{@code updateItem} respects {@code WRITE_IF_NOT_EXISTS}: if the attribute already exists in DynamoDB,
 *       the previously stored value is preserved and a new UUID will not overwrite it.</li>
 * </ul>
 *
 * <p>Examples:</p>
 * <pre>{@code
 * DynamoDbEnhancedClient client = DynamoDbEnhancedClient.builder()
 *     .dynamoDbClient(lowLevelClient)
 *     .extensions(AutoGeneratedUuidExtension.create())
 *     .build();
 * }</pre>
 */

@SdkPublicApi
@ThreadSafe
public final class AutoGeneratedUuidExtension implements DynamoDbEnhancedClientExtension {
    private static final String CUSTOM_METADATA_KEY =
        "software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedUuidExtension:AutoGeneratedUuidAttribute";
    private static final AutoGeneratedUuidAttribute AUTO_GENERATED_UUID_ATTRIBUTE = new AutoGeneratedUuidAttribute();

    private AutoGeneratedUuidExtension() {
    }

    /**
     * @return an Instance of {@link AutoGeneratedUuidExtension}
     */
    public static AutoGeneratedUuidExtension create() {
        return new AutoGeneratedUuidExtension();
    }

    /**
     * Modifies the WriteModification UUID string with the attribute updated with the extension.
     *
     * @param context The {@link DynamoDbExtensionContext.BeforeWrite} context containing the state of the execution.
     * @return WriteModification String updated with attribute updated with Extension.
     */
    @Override
    public WriteModification beforeWrite(DynamoDbExtensionContext.BeforeWrite context) {


        Collection<String> customMetadataObject = context.tableMetadata()
                                                         .customMetadataObject(CUSTOM_METADATA_KEY, Collection.class)
                                                         .orElse(null);

        if (customMetadataObject == null) {
            return WriteModification.builder().build();
        }

        Map<String, AttributeValue> itemToTransform = new HashMap<>(context.items());
        customMetadataObject.forEach(key -> insertUuidIfMissing(itemToTransform, key));
        return WriteModification.builder()
                                .transformedItem(Collections.unmodifiableMap(itemToTransform))
                                .build();
    }

    private static void insertUuidIfMissing(Map<String, AttributeValue> item, String key) {
        AttributeValue existing = item.get(key);
        boolean missing = existing == null || StringUtils.isEmpty(existing.s());
        if (missing) {
            item.put(key, AttributeValue.builder().s(UUID.randomUUID().toString()).build());
        }
    }

    public static final class AttributeTags {

        private AttributeTags() {
        }

        /**
         * Tags which indicate that the given attribute is supported wih Auto Generated UUID Record Extension.
         *
         * @return Tag name for AutoGenerated UUID Records
         */
        public static StaticAttributeTag autoGeneratedUuidAttribute() {
            return AUTO_GENERATED_UUID_ATTRIBUTE;
        }
    }

    private static class AutoGeneratedUuidAttribute implements StaticAttributeTag {

        @Override
        public <R> void validateType(String attributeName, EnhancedType<R> type,
                                     AttributeValueType attributeValueType) {

            Validate.notNull(type, "type is null");
            Validate.notNull(type.rawClass(), "rawClass is null");
            Validate.notNull(attributeValueType, "attributeValueType is null");

            if (!type.rawClass().equals(String.class)) {
                throw new IllegalArgumentException(String.format(
                    "Attribute '%s' of Class type %s is not a suitable Java Class type to be used as a Auto Generated "
                    + "Uuid attribute. Only String Class type is supported.", attributeName, type.rawClass()));
            }
        }

        @Override
        public Consumer<StaticTableMetadata.Builder> modifyMetadata(String attributeName,
                                                                    AttributeValueType attributeValueType) {
            return metadata -> metadata.addCustomMetadataObject(CUSTOM_METADATA_KEY, Collections.singleton(attributeName))
                                       .markAttributeAsKey(attributeName, attributeValueType);
        }
    }
}