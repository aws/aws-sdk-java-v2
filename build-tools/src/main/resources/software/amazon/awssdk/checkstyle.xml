<?xml version="1.0"?>
<!--
  ~ Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License").
  ~ You may not use this file except in compliance with the License.
  ~ A copy of the License is located at
  ~
  ~  http://aws.amazon.com/apache2.0
  ~
  ~ or in the "license" file accompanying this file. This file is distributed
  ~ on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language governing
  ~ permissions and limitations under the License.
  -->

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!--
    Checkstyle configuration originally derived from the Google coding conventions from Google Java Style that can be
    found at https://google.github.io/styleguide/javaguide.html. Deviations have been made where desired.
 -->
<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java"/>

    <!-- Files must not contain tabs. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Files must contain a copyright header. -->
    <module name="Header">
        <property name="header"
                  value="/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;).\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the &quot;license&quot; file accompanying this file. This file is distributed\n * on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */"/>
    </module>

    <module name="SuppressionFilter">
        <property name="file"
                  value="${checkstyle.suppressions.file}"
                  default="checkstyle-suppressions.xml"/>
    </module>

    <module name="TreeWalker">

        <!-- Allow suppressing rules via comments. -->
        <module name="SuppressionCommentFilter"/>

        <!-- Class names must match the file name in which they are defined. -->
        <module name="OuterTypeFilename"/>

        <!-- Only one class may be defined per file. -->
        <module name="OneTopLevelClass"/>

        <!-- Special escape sequences like \n and \t must be used over the octal or unicode equivalent. -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>

        <!-- Unicode escapes must not be used for printable characters. -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!-- Stars must not be used in import statements. -->
        <module name="AvoidStarImport"/>

        <!-- Checks for unused imports. -->
        <module name="UnusedImports"/>

        <!-- Package name and imports must not be wrapped. -->
        <module name="NoLineWrap"/>

        <!-- Braces must be used for all blocks. -->
        <module name="NeedBraces"/>

        <!-- Braces must not be empty for most language constructs. -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <!-- For language constructs related to the previous statement (eg. "else" or "catch"), the keywords must
             be defined on the same line as the right curly brace. -->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>

        <!-- For other language constructs, they must be defined on a separate line. -->
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!-- Language constructs like "if" and "while" must be followed by whitespace. -->
        <module name="WhitespaceAfter"/>

        <!-- Language constructs must be surrounded by whitespace. -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement."/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- Only one statement per line is permitted. -->
        <module name="OneStatementPerLine"/>

        <!-- Variables must be defined on different lines. -->
        <module name="MultipleVariableDeclarations"/>

        <!-- No C-style array declarations are permitted (eg. String args[]). -->
        <module name="ArrayTypeStyle"/>

        <!-- Defaults must always be included for switch statements, even if they are empty. -->
        <module name="MissingSwitchDefault"/>

        <!-- Case blocks with statements on them must include a break, return, etc. or the comment "fall through". -->
        <module name="FallThrough"/>

        <!-- When defining long literals, an upper L must be used. -->
        <module name="UpperEll"/>

        <!-- Modifiers like public, abstract, static, etc. must follow a consistent order. -->
        <module name="ModifierOrder"/>

        <!-- Empty lines must separate methods and constructors. -->
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!-- New lines must happen before dots. -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>

        <!-- New lines must happen after commas. -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>

        <!-- Package names must follow a defined format. -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Type names must follow a defined format. -->
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Non-constant fields must follow a defined format. -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Constant fields must follow a defined format. -->
        <module name="ConstantName">
            <property name="format" value="^log?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>

        <!-- Method and lambda parameters must follow a defined format. -->
        <module name="ParameterName">
            <property name="id" value="ParameterNameNonPublic"/>
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <property name="accessModifiers" value="protected, package, private"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="id" value="ParameterNamePublic"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="accessModifiers" value="public"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Catch parameters must follow a defined format. -->
        <module name="CatchParameterName">
            <property name="format" value="^(e|t|[a-z][a-zA-Z0-9]*)$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Local variables must follow a defined format. -->
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Type parameters must follow a defined format. -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Method names must follow a defined format. -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Should not use kotlin function name as public method name -->
        <module name="software.amazon.awssdk.buildtools.checkstyle.SdkPublicMethodNameCheck">
            <property name="format" value="^(?!(?:apply|let|run|also|with)$).*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' conflicts with kotlin function name"/>
        </module>

        <!-- Finalizers must not be overridden. -->
        <module name="NoFinalizer"/>

        <!-- Whitespace around generics must follow a defined format. -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should be followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- File indentation must follow a convention of 4 spaces (8 for throws statements). -->
        <module name="Indentation">
            <property name="throwsIndent" value="8"/>
            <property name="arrayInitIndent" value="8"/>
        </module>

        <!-- Abbreviations must follow the same conventions as any other word (eg. use Aws, not AWS). -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="severity" value="warning"/>
        </module>

        <!-- Class contents must be defined in the order suggested by Sun/Oracle:
             http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141855.html#1852 -->
        <module name="DeclarationOrder"/>

        <!--&lt;!&ndash; Overloaded methods and constructors must be defined together. &ndash;&gt;-->
        <!--<module name="OverloadMethodsDeclarationOrder">-->
        <!--<property name="severity" value="warning"/> &lt;!&ndash; TODO: Make error. &ndash;&gt;-->
        <!--</module>-->

        <!-- Variables must be declared near where they are used. -->
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="10"/>
        </module>

        <!-- Static imports must occur before external package imports. -->
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
        </module>

        <!-- Method names must be specified on the same line as their parameter list. -->
        <module name="MethodParamPad"/>

        <!-- There must be no space between a method name and its parameter list. -->
        <module name="ParenPad"/>

        <!-- Non-field annotations must be on separate lines, or in the case of single parameterless annotation can be
             placed on the same line as the signature. -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Fields can have multiple annotations applied on the same line. -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <!-- Catch blocks must not be empty without a comment. -->
        <module name="EmptyCatchBlock"/>

        <!-- Comments must be placed at the same indentation level as the surrounding code. -->
        <module name="CommentsIndentation"/>

        <!-- Checks for imports of certain packages           -->
        <!-- See http://checkstyle.sf.net/config_imports.html -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="org.apache.http.annotation,javax.annotation.Generated"/>
        </module>

        <!-- Checks that the override annotation is specified when using @inheritDoc javadoc. -->
        <module name="MissingOverride"/>

        <!-- Do not allow assignment in subexpressions (except in some cases in loop conditions). -->
        <module name="InnerAssignment"/>

        <!-- Checks that we don't use System.out.print -->
        <module name="Regexp">
          <property name="format" value="System\s*\.\s*(out|err)\s*(\.|::)\s*print"/>
          <property name="illegalPattern" value="true"/>
          <property name="message" value="Don't use System console for logging, use a logger instead"/>
          <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't use System.getenv or System.getProperty -->
        <module name="Regexp">
          <property name="format" value="System\s*(\.|::)\s*(getenv|getProperty)"/>
          <property name="illegalPattern" value="true"/>
          <property name="message" value="Use SystemSetting instead of System.getenv and System.getProperty"/>
          <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't implement AutoCloseable/Closeable -->
        <module name="Regexp">
            <property name="format" value="(class|interface).*(implements|extends).*[^\w](Closeable|AutoCloseable)[^\w]"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use SdkAutoCloseable instead of Closeable/AutoCloseable"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't use Objects.hash. Objects.hashCode is preferred-->
        <module name="Regexp">
            <property name="format" value="\bObjects.hash\b"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Don't use Objects.hash, use Objects.hashCode instead"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't use sslContext.newHandler directly -->
        <module name="Regexp">
            <property name="format" value="\sslContext.newHandler\b"/>
            <property name="illegalPattern" value="true"/>
            <property name="message"
                      value="Don't use sslContext.newHandler directly, use NettyUtils.newSslHandler instead"/>
            <property name="ignoreComments" value="true"/>
        </module>


        <!-- Checks that we don't use AttributeKey.newInstance directly -->
        <module name="Regexp">
            <property name="format" value="AttributeKey\.newInstance"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use NettyUtils.getOrCreateAttributeKey to safely declare AttributeKeys"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't use Thread.currentThread().getContextClassLoader() directly -->
        <module name="Regexp">
            <property name="format" value="Thread\s*\.\s*currentThread\s*\(\s*\)\s*(\.|::)\s*getContextClassLoader"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use software.amazon.awssdk.core.internal.util.ClassLoaderHelper Class to load the class."/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks that we don't use plural enum names -->
        <module name="software.amazon.awssdk.buildtools.checkstyle.PluralEnumNames"/>

        <!-- Checks for redundant public modifier on interfaces and other redundant modifiers -->
        <module name="RedundantModifier" />

        <!-- Checks for utility and constants classes to have private constructor-->
        <module name="HideUtilityClassConstructor"/>

        <!-- Checks that every class is marked with Sdk Annotation -->
        <module name="software.amazon.awssdk.buildtools.checkstyle.MissingSdkAnnotationCheck" />

        <!-- Checks that no 'final' are added on local variables -->
        <module name="software.amazon.awssdk.buildtools.checkstyle.UnnecessaryFinalOnLocalVariableCheck" />
    </module>

        <!-- Enforce maximum line lengths. -->
    <module name="LineLength">
        <property name="max" value="130"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

</module>
